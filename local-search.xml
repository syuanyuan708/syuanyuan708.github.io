<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MCP下一代AI标准！原理+开发实战！Cursor、Claude、Cline！</title>
    <link href="/2025/04/04/MCP%E6%8A%80%E6%9C%AF/"/>
    <url>/2025/04/04/MCP%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从前段时间非常火的 <strong>Manus AI</strong> 到最近发布的 <strong>OpenAI 智能体</strong>，通用性的 <strong>AI Agent</strong> 已经成为下一代 AI 发展的主流趋势。AI Agent 的发展离不开一项最关键的技术，就是 <strong>MCP</strong>。<br><br>那么使用 MCP，都能做些什么呢？</p><hr><h2 id="1-MCP-能做什么？"><a href="#1-MCP-能做什么？" class="headerlink" title="1. MCP 能做什么？"></a>1. MCP 能做什么？</h2><p>以下是一个基于 MCP Server <strong>自动化操作百度网盘</strong> 的示例。只需在 <strong>Cursor</strong> 配置 MCP Server，使用自然语言，就能够完成百度网盘中文件的上传、下载等功能。<br><img src="https://tyxiaoming.top/MCP/百度网盘演示.png" alt="百度网盘演示" width="750" /><br>接下来是一个 <strong>自动生成英伟达股票分析报告</strong> 的使用场景。只需要给 Cursor 配置 <strong>一个数据抓取的 MCP Server</strong> 和 <strong>一个操作本地文件的 MCP Server</strong>，它就能自动抓取指定的数据，并编写分析报告，自动保存到我们的电脑上。<br><img src="https://tyxiaoming.top/MCP/cursor演示.png" alt="股票分析演示" width="750" /><br>我们上面演示的只是 MCP 的一些简单使用场景。通过 MCP，AI 和各类资源可以相互联通，从而使我们能够根据需要，定制化实现自己的专属 AI Agent。</p><hr><h2 id="2-MCP-技术介绍"><a href="#2-MCP-技术介绍" class="headerlink" title="2. MCP 技术介绍"></a>2. MCP 技术介绍</h2><p>要理解 <strong>MCP</strong>，我们首先回顾一下以前的 AI 工作方式。比如，我们让 AI 抓取 <strong>英伟达近一年的股票数据</strong>，并生成一份分析报告。<br><br>以前的 AI 可能会告诉我们，<strong>无法完成该任务</strong>，或者它会使用搜索引擎搜索相关数据，但它 <strong>无法把报告自动保存到我们的电脑上</strong>，需要手动复制保存。以前的 AI 更像是一个 <strong>黑盒子</strong>，接收一个问题后输出答案，但其它操作无法自动完成。<br><br>而 <strong>MCP 的出现，就是为了解决这个问题</strong>！有了 MCP 后，再让 AI 完成相同任务时，它会先通过 <strong>数据抓取的 MCP Server</strong> 获取指定数据，然后生成报告，最后通过 <strong>本地文件的 MCP Server</strong> 将报告保存到本地。<br><img src="https://tyxiaoming.top/MCP/MCP自动化.png" alt="MCP自动化" width="750" /><br>换句话说，以前 AI <strong>无法自动完成的操作</strong>，现在可以通过 <strong>MCP Server</strong> 完成。</p><h3 id="MCP-是什么？"><a href="#MCP-是什么？" class="headerlink" title="MCP 是什么？"></a>MCP 是什么？</h3><p>MCP 的全称是 <strong>Model Context Protocol</strong>（模型上下文协议），由 <strong>Anthropic</strong> 提出，是一个 <strong>开放协议</strong>。它就像一个 <strong>USB 接口</strong>，能够将 AI 模型与 <strong>网络、本地文件、数据库、GitHub</strong> 等资源互联。</p><h3 id="MCP-的架构"><a href="#MCP-的架构" class="headerlink" title="MCP 的架构"></a>MCP 的架构</h3><p>MCP 采用了 <strong>C&#x2F;S 架构设计</strong>，包括 <strong>Client（客户端）</strong> 和 <strong>Server（服务器）</strong> 两部分。</p><ul><li><strong>Client</strong> 从 Server 获取 <strong>功能列表</strong>，了解可用的 MCP Server 服务。</li><li>客户端根据功能列表调用对应的服务。</li></ul><br>📌 **示例：英伟达股票分析报告的执行流程**<ol><li>在 <strong>Cursor</strong> 配置 MCP Server，包括 <strong>数据抓取 Server</strong> 和 <strong>本地文件操作 Server</strong>。</li><li>MCP Client <strong>查询功能列表</strong>，发现可以 <strong>抓取数据 firecrawl_scrape</strong>。</li><li>AI 调用 <strong>firecrawl_scrape</strong>，从指定网页抓取股票数据。</li><li>AI 生成分析报告。</li><li>MCP Client <strong>发现 write_file 功能</strong>，调用 <strong>本地文件 Server</strong> 将报告保存到电脑。</li></ol><p><strong>除了 Cursor，Claude、Cline 等工具也内置了 MCP Client</strong>，可以直接配置 MCP Server。<br><img src="https://tyxiaoming.top/MCP/MCP流程.png" alt="MCP流程" width="750" /><br>如果 MCP <strong>能够顺利推广</strong>，它将成为 <strong>统一 AI 生态圈的开放标准</strong>。</p><hr><h2 id="3-MCP-Server-开发"><a href="#3-MCP-Server-开发" class="headerlink" title="3. MCP Server 开发"></a>3. MCP Server 开发</h2><p>如果你想要开发一个属于自己的 <strong>MCP Server</strong>，以下是详细的开发步骤。我们以实现一个 <strong>百度网盘的 MCP Server</strong> 为例，来进行详细介绍。</p><h3 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h3><p>首先，需要安装一些开发工具和依赖，确保开发环境已经准备好。</p><ol><li><p><strong>安装 uv（Python 环境管理工具）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install uv<br></code></pre></td></tr></table></figure><p><code>uv</code> 工具可以帮助你创建和管理虚拟环境，保证项目的依赖隔离。</p></li><li><p><strong>创建 MCP Server 项目</strong></p><p>使用 <code>uv</code> 创建一个新的 MCP Server 项目。以下命令将创建一个名为 <code>baidu</code> 的项目目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uv new baidu<br></code></pre></td></tr></table></figure></li><li><p><strong>安装所需的依赖</strong></p><p>我们需要安装一些用于与百度网盘交互的库，比如 <strong>bypy</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install bypy<br></code></pre></td></tr></table></figure><p>这些库将帮助你实现与百度网盘的自动化交互。</p></li></ol><h3 id="3-2-开发-MCP-Server"><a href="#3-2-开发-MCP-Server" class="headerlink" title="3.2 开发 MCP Server"></a>3.2 开发 MCP Server</h3><p>以下是开发一个完整的 MCP Server 的流程，包括编写代码、定义工具函数、启动服务器等。</p><ol><li><p><strong>删除默认文件</strong></p><p>项目创建后，会生成一个默认的 <code>hello.py</code> 文件。你可以删除这个文件，专门编写自己需要的功能代码。</p></li><li><p><strong>编写 MCP Server 的代码</strong></p><p>下面是一个简单的百度网盘文件上传和下载功能的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><span class="hljs-keyword">from</span> bypy <span class="hljs-keyword">import</span> ByPy<br><span class="hljs-keyword">from</span> mcp.server.fastmcp <span class="hljs-keyword">import</span> FastMCP<br><br><span class="hljs-comment"># 初始化 FastMCP server</span><br>mcp = FastMCP(<span class="hljs-string">&quot;baidu&quot;</span>)<br><br><span class="hljs-meta">@mcp.tool()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>(<span class="hljs-params">src_file: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;上传文件到百度网盘</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        src_file: 需要上传的文件路径</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    bp = ByPy()<br>    bp.upload(<br>        localpath=src_file,<br>        remotepath=src_file.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>]<br>    )  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传成功&quot;</span> <br><br><span class="hljs-meta">@mcp.tool()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_path</span>(<span class="hljs-params">src_path: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;上传文件夹到百度网盘</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        src_path: 需要上传的文件夹路径</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    bp = ByPy()<br>    bp.syncup(<br>        src_path,<br>        src_path.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>]<br>    )<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传成功&quot;</span>   <br><br><span class="hljs-meta">@mcp.tool()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">download_file</span>(<span class="hljs-params">src_file: <span class="hljs-built_in">str</span>, target_file: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;下载文件到本地</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        src_file: 需要下载的文件路径</span><br><span class="hljs-string">        target_file: 下载到的文件路径</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    bp = ByPy()<br>    bp.download(<br>        src_file,<br>        target_file<br>    )  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;下载成功&quot;</span><br><br><span class="hljs-meta">@mcp.tool()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_path</span>(<span class="hljs-params">src_path: <span class="hljs-built_in">str</span>, target_path: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;下载文件夹到本地</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">        src_path: 需要下载的文件夹路径</span><br><span class="hljs-string">        target_path: 下载到的文件夹路径</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    bp = ByPy()<br>    bp.syncdown(<br>        src_path,<br>        target_path<br>    )<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;下载成功&quot;</span> <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 修改传输方式以适应 Cursor 环境，比如使用 &#x27;ws&#x27; 传输</span><br>    mcp.run(transport=<span class="hljs-string">&#x27;stdio&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>代码说明：</p><ul><li>使用 <code>@server.tool</code> 装饰器来定义 <code>upload_file</code> 和 <code>download_file</code> 两个函数，分别用于百度网盘的上传和下载操作。</li><li>通过 <strong>bypy</strong> 库来完成与百度网盘的交互。</li><li>启动服务器后，MCP Client 可以通过配置调用这些功能。</li></ul></li><li><p><strong>获取百度网盘的 Token</strong></p><p>使用 <strong>bypy</strong> 时，需要进行身份认证。你需要获取 <strong>百度网盘的 API Token</strong>。执行下面这段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bypy <span class="hljs-keyword">import</span> ByPy<br>bp = ByPy()<br><span class="hljs-built_in">print</span>(bp.<span class="hljs-built_in">list</span>())<br></code></pre></td></tr></table></figure><p>然后使用输出的网址，获取token：</p><ul><li>在浏览器中访问授权链接，复制 Token。</li><li>在代码中使用该 Token 完成身份验证。</li></ul></li></ol><img src="https://tyxiaoming.top/MCP/百度token.png" alt="bypy token" width="750" /><h3 id="3-3-启动-MCP-Server"><a href="#3-3-启动-MCP-Server" class="headerlink" title="3.3 启动 MCP Server"></a>3.3 启动 MCP Server</h3><p>完成代码编写后，启动 MCP Server：</p><ol><li><p><strong>获取项目路径</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure></li><li><p><strong>获取 uv 路径</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> uv<br></code></pre></td></tr></table></figure></li><li><p><strong>启动 MCP Server</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uv run baidu.py<br></code></pre></td></tr></table></figure></li></ol><p>然后，在 <strong>Cursor &gt; 设置 &gt; MCP &gt; 添加 MCP Server</strong> 中，输入启动命令，即可使用。<br><img src="https://tyxiaoming.top/MCP/cursor配置.png" alt="cursor配置MCP" width="750" /></p><p>注意命令中的 <code>uv</code> 如果没有设置环境变量的话，需要使用<code>uv</code>的绝对路径， <strong>Linux&#x2F;MacOS</strong> 可以执行：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> uv<br></code></pre></td></tr></table></figure><p><strong>Windows</strong> 可以执行：  </p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">where</span> uv<br></code></pre></td></tr></table></figure><hr><h2 id="4-MCP-Server-的使用"><a href="#4-MCP-Server-的使用" class="headerlink" title="4. MCP Server 的使用"></a>4. MCP Server 的使用</h2><p>在 <strong>Cursor</strong> 中配置 MCP Server 后，你可以通过自然语言与 AI 进行交互，自动完成文件上传、下载等任务。</p><p>📌 <strong>示例：AI 自动管理百度网盘文件</strong></p><ol><li><strong>上传文件</strong>：<ul><li>AI 解析提示词，调用 <code>upload_file</code>。</li><li>文件成功上传到百度网盘。</li></ul></li></ol><p>效果图：<br><img src="https://tyxiaoming.top/MCP/上传文件.png" alt="上传文件" width="750" /></p><ol start="2"><li><strong>下载文件</strong>：<ul><li>AI 解析提示词，调用 <code>download_file</code>。</li><li>文件成功下载到本地。</li></ul></li></ol><p>效果图：<br><img src="https://tyxiaoming.top/MCP/百度网盘演示.png" alt="下载文件" width="750" /></p><hr><h2 id="5-直接使用外部-MCP-Server"><a href="#5-直接使用外部-MCP-Server" class="headerlink" title="5. 直接使用外部 MCP Server"></a>5. 直接使用外部 MCP Server</h2><p>除了开发自己的 MCP Server，你还可以直接使用其他人开发的 MCP Server。例如，进行 <strong>自动化股票分析</strong> 时，直接配置 <strong>数据抓取 MCP Server</strong> 和 <strong>本地文件操作 MCP Server</strong>，然后自动完成数据抓取、报告生成和保存操作。<br><br><img src="https://tyxiaoming.top/MCP/cursor2.png" alt="配置MCP" width="750" /></p><p>除了 <strong>cursor</strong> 像 <strong>Claude、cline</strong> 也都内置了 MCP 客户端，可以直接配置 MCP Server。<strong>Claude</strong> 需要在 <code>json</code> 文件中配置：<br><img src="https://tyxiaoming.top/MCP/Claude配置.png" alt="Claude配置MCP" width="750" /></p><p><strong>cline</strong> 和 <strong>Claude</strong> 一样，也需要在 <code>json</code> 文件中配置：<br><img src="https://tyxiaoming.top/MCP/cline配置.png" alt="cline配置MCP" width="750" /></p><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>MCP 使 <strong>AI 更强大</strong>，能够 <strong>自动执行复杂任务</strong>，并连接各类资源。未来，每个人都可以根据自己的需求，打造属于自己的 AI Agent。<br><br>感谢大家的点赞支持，我们下期见！🚀</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] <a href="https://modelcontextprotocol.io/quickstart">MCP 开发文档</a></li><li>[2] <a href="https://github.com/modelcontextprotocol/servers">MCP Servers</a></li><li>[3] <a href="https://www.firecrawl.dev/">FireCrawl</a></li><li>[4] <a href="https://nodejs.org/zh-cn">Nodejs</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费 ChatGPT API 公益项目使用指南</title>
    <link href="/2025/03/28/ChatGPT%E5%85%8D%E8%B4%B9API/"/>
    <url>/2025/03/28/ChatGPT%E5%85%8D%E8%B4%B9API/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这是一个可以 <strong>免费使用</strong> 的 ChatGPT API <strong>公益项目</strong> 🎉。操作非常简单，只需要一个 GitHub 账号，就可以直接使用！<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/1_hdLI905cO4Opk1xXTsCBlg.jpg" alt="ChatGPT API" width="750" /></p><h3 id="该项目的优势："><a href="#该项目的优势：" class="headerlink" title="该项目的优势："></a>该项目的优势：</h3><ol><li><strong>无需部署中转服务</strong>，国内网络可直接使用。</li><li><strong>无需 ChatGPT 账号</strong>，没有封号风险。</li><li><strong>免费额度足够日常使用</strong>，可实现多种功能。</li></ol><h3 id="主要用途："><a href="#主要用途：" class="headerlink" title="主要用途："></a>主要用途：</h3><ul><li><strong>AI 聊天软件</strong> 💬：调用 ChatGPT 进行 AI 交互。</li><li><strong>沉浸式翻译</strong> 🌍：一键翻译网页。</li><li><strong>AI 编程工具</strong> 💻：结合 Cursor、Roo Code 进行AI编程。</li><li><strong>开发 AI 应用</strong> 📱：例如提取指标数据的工具。</li></ul><hr><h2 id="申请-API-Key"><a href="#申请-API-Key" class="headerlink" title="申请 API Key"></a>申请 API Key</h2><h3 id="1-进入项目页面"><a href="#1-进入项目页面" class="headerlink" title="1. 进入项目页面"></a>1. 进入项目页面</h3><p>首先，我们需要一个 <strong>GitHub 账号</strong> 作为登录凭证。</p><p>在 GitHub 上找到这个 <a href="https://github.com/popjane/free_chatgpt_api"><strong>Free ChatGPT API 项目</strong></a>，它提供了符合 OpenAI 标准格式的 API 接口，可以免费使用 <strong>GPT-4o Mini</strong>、<strong>GPT-3.5 Turbo</strong> 等模型。</p><h4 id="可以免费使用的模型："><a href="#可以免费使用的模型：" class="headerlink" title="可以免费使用的模型："></a>可以免费使用的模型：</h4><ul><li><strong>GPT-4o Mini</strong> 🧠：虽然是 “Mini” 版本，但依然具备强大的文本理解和生成能力。</li><li><strong>Whisper</strong> 🎙️：一个高精度的语音转文本模型，可免费实现类似剪映的，字幕识别功能。</li><li><strong>文生图模型</strong> 🎨：可用于 AI 生成图片。</li></ul><p>模型后面的数字，是模型的发布日期.比如0125，就表示这个模型是一月25日发布的。这种模型叫做静态模型，发布以后就，不会再修改了。而后面不带数字的模型，比如这个GPT 3.5 Turbo，它会去不断地更新迭代，如果我们开发一个APP，希望调用，ChatGPT API后的返回结果，保持不变，就可以使用静态的模型。<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/免费模型.png" alt="免费模型" width="750" /></p><blockquote><p><strong>注意</strong>：GPT-4o Mini 的原生 API 需要付费（$0.15&#x2F;百万 tokens），但在此项目中可免费使用！</p></blockquote><h3 id="2-获取-API-Key"><a href="#2-获取-API-Key" class="headerlink" title="2. 获取 API Key"></a>2. 获取 API Key</h3><p>点击 <strong>“前往获取免费 API Key”</strong>，使用 GitHub 账号授权登录。</p><p>授权完成后，你会得到 <strong>API URL 和 API Key</strong>。<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/API.png" alt="API KEY" width="750" /></p><blockquote><p><strong>提醒</strong>：</p><ul><li>API Key 是 <strong>固定的</strong>，不会变更。</li><li><strong>妥善保存</strong> API Key，避免泄露。</li><li>忘记 API Key 可重新登录 GitHub 账号获取。</li></ul></blockquote><hr><h2 id="API-使用场景"><a href="#API-使用场景" class="headerlink" title="API 使用场景"></a>API 使用场景</h2><h3 id="1-在-Chatbox-中使用（AI-聊天软件）"><a href="#1-在-Chatbox-中使用（AI-聊天软件）" class="headerlink" title="1. 在 Chatbox 中使用（AI 聊天软件）"></a>1. 在 Chatbox 中使用（AI 聊天软件）</h3><p>Chatbox 是一个开源 AI 聊天软件，支持 <strong>Windows、macOS 和 Linux</strong>。</p><h4 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h4><ol><li><strong>打开 Chatbox</strong>，点击左下角的 <strong>设置</strong> ⚙️。</li><li><strong>选择 OpenAI 作为模型提供方</strong>。</li><li><strong>粘贴 API Key 和 API URL</strong>。</li><li><strong>选择 GPT-4o Mini</strong> 作为默认模型。</li><li><strong>保存设置</strong>，开始聊天！</li></ol><p>⭐️<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/chatbox配置.png" alt="Chatbox配置" width="750" /></p><h4 id="体验示例："><a href="#体验示例：" class="headerlink" title="体验示例："></a>体验示例：</h4><p>我们用一个 <strong>物理问题</strong> 进行测试：</p><blockquote><p>“用一根绳子吊住一根胡萝卜，达到平衡后，从中间切开，哪部分更重？”</p></blockquote><p>Chatbox 迅速给出答案：<strong>根部更重</strong>，说明模型的推理能力非常不错！🤯<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/chtbox使用.png" alt="Chatbox使用" width="750" /></p><hr><h3 id="2-在沉浸式翻译插件中使用"><a href="#2-在沉浸式翻译插件中使用" class="headerlink" title="2. 在沉浸式翻译插件中使用"></a>2. 在沉浸式翻译插件中使用</h3><p>此 API 可用于 <strong>网页翻译</strong>，替代谷歌翻译，效果更佳。</p><h4 id="配置步骤：-1"><a href="#配置步骤：-1" class="headerlink" title="配置步骤："></a>配置步骤：</h4><ol><li><strong>打开沉浸式翻译插件</strong>，进入设置。</li><li><strong>选择 OpenAI 作为翻译服务</strong>。</li><li><strong>粘贴 API Key 和 API URL</strong>。</li><li><strong>调整每秒最大请求数</strong>，避免超额使用。</li><li><strong>保存设置，测试服务</strong> ✅。</li></ol><p>⭐️<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/翻译配置.png" alt="沉浸式翻译配置" width="750" /><br>体验翻译一篇英文文章，效果明显 <strong>优于谷歌翻译</strong>，而且 <strong>没有超额使用问题</strong>！<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/翻译使用.png" alt="沉浸式翻译使用" width="750" /></p><hr><h3 id="3-在-Cursor-代码助手中使用（AI-编程）"><a href="#3-在-Cursor-代码助手中使用（AI-编程）" class="headerlink" title="3. 在 Cursor 代码助手中使用（AI 编程）"></a>3. 在 Cursor 代码助手中使用（AI 编程）</h3><p>Cursor 是一款 <strong>AI 编程工具</strong>，但价格较高。我们可以 <strong>使用免费 ChatGPT API 进行 AI 编程</strong>。</p><h4 id="配置步骤：-2"><a href="#配置步骤：-2" class="headerlink" title="配置步骤："></a>配置步骤：</h4><ol><li><strong>打开 Cursor 设置</strong>，进入 <strong>Models 选项</strong>。</li><li><strong>仅勾选 GPT-4o Mini</strong>。</li><li><strong>粘贴 API Key 和 API URL</strong>。</li><li><strong>关闭 OpenAI 官方 API 选项</strong>。</li></ol><p>⭐️<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/cursor配置.png" alt="cursor配置" width="750" /></p><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><p>使用 Cursor 让 AI 开发一个 <strong>五子棋 Web 游戏</strong> 🎮：</p><ul><li><strong>要求 AI 生成代码</strong> ✅。</li><li><strong>添加弹窗提示，优化 UI</strong> 🎨。</li><li><strong>修复判断错误，调整棋子颜色</strong> 🛠️。</li></ul><p>⭐️<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/cursor使用.png" alt="cursor使用" width="750" /><br>最终，我们成功完成了一个 <strong>可正常运行的五子棋游戏</strong>！</p><hr><h3 id="4-在-Roo-Code（AI-编程插件）中使用"><a href="#4-在-Roo-Code（AI-编程插件）中使用" class="headerlink" title="4. 在 Roo Code（AI 编程插件）中使用"></a>4. 在 Roo Code（AI 编程插件）中使用</h3><p>Roo Code 是 <strong>VS Code 上的 AI 编程插件</strong>，支持 <strong>代码生成、调试、系统设计</strong>。</p><h4 id="配置步骤：-3"><a href="#配置步骤：-3" class="headerlink" title="配置步骤："></a>配置步骤：</h4><ol><li>**在 VS Code 中搜索 “Roo Code”**，安装插件 🔍。</li><li><strong>打开设置，选择 OpenAI 兼容 API</strong>。</li><li><strong>粘贴 API Key 和 API URL（注意加上 <code>/v1</code>）</strong>。</li><li><strong>选择 GPT-4o Mini 作为模型</strong>。</li><li><strong>完成配置，开始编码</strong>！</li></ol><p>⭐️<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/roo配置.png" alt="roo配置" width="750" /></p><p>Roo Code 提供 <strong>四种模式</strong>：</p><ul><li><strong>Code 模式</strong> 📝：AI 代码生成。</li><li><strong>Architect 模式</strong> 🏗️：系统架构设计。</li><li><strong>Ask 模式</strong> ❓：代码相关问答。</li><li><strong>Debug 模式</strong> 🐞：项目调试。</li></ul><blockquote><p><strong>体验</strong>：我们用 Roo Code 让 AI 生成一个 <strong>Web 端五子棋游戏</strong>，效果也相当不错！</p></blockquote><p>⭐️<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/roo使用.png" alt="roo使用" width="750" /></p><hr><h3 id="5-在-APP-开发中使用"><a href="#5-在-APP-开发中使用" class="headerlink" title="5. 在 APP 开发中使用"></a>5. 在 APP 开发中使用</h3><p>借助此 <strong>免费 ChatGPT API</strong>，我们可以开发自己的 <strong>AI 应用</strong> 📱。</p><p>示例：<strong>提取指标数据的代码</strong> 📊</p><ul><li>通过 API 处理 <strong>混乱文本</strong>，自动提取数据。</li><li><strong>统一格式</strong>（数字、百分比、单位）。</li><li>结合 OCR，可扩展为 <strong>数据提取 APP</strong>。</li></ul><p>⭐️<br><img src="https://tyxiaoming.top/ChatGPT-Free-API/代码.png" alt="代码开发" width="750" /></p><p>执行示例代码后，AI <strong>精准提取销售数据</strong>，格式清晰，方便后续分析！</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个 <strong>免费 ChatGPT API</strong> 具有 <strong>强大功能</strong> 和 <strong>广泛应用场景</strong>，完全可以满足日常需求：</p><p>✅ <strong>AI 聊天</strong> （Chatbox）<br>✅ <strong>网页翻译</strong> （沉浸式翻译插件）<br>✅ <strong>AI 编程</strong> （Cursor &#x2F; Roo Code）<br>✅ <strong>APP 开发</strong> （数据提取工具）<br><br><br>此外，该项目还提供 <strong>付费 API 服务</strong>，但本文未进行测试，有兴趣的朋友可自行研究。</p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manus 开源替代版：OpenManus！免费+无需邀请码！本地部署+实测！36K Stars</title>
    <link href="/2025/03/17/OpenManus/"/>
    <url>/2025/03/17/OpenManus/</url>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>最近 Manus 的通用型 AI Agent 非常火。但是因为它需要邀请码才能体验，所以大部分人目前并没有机会去体验这款 AI 产品到底表现怎么样？<br><br>就在前几天，有一个团队在 GitHub 发布了 Manus 的开源复刻版，也就是这个 <a href="https://github.com/mannaandpoem/OpenManus"><strong>Open Manus</strong></a>。在它的项目介绍里面，也声明这是一个 Manus 的替代品，而且不需要邀请码。<br><br>可以看到，这个项目目前已经有 <strong>36K Star</strong> 了。查询一下它的 Star 历史，可以发现：这个项目是 <strong>3 月 6 日</strong> 创建的，到 <strong>3 月 18 日</strong> 就增长了 <strong>36K Star</strong>!🤔<br><img src="https://tyxiaoming.top/OpenManus/star.png" alt="Stars" width="800" /><br>首先必须说，这次借势真的非常成功。那这款开源的 Manus 表现到底怎么样？有没有复刻 Manus 宣传的那些强大功能呢？今天这篇文章，我们就来实际体验一下。<br><img src="https://tyxiaoming.top/OpenManus/飞猪.png" alt="起飞" width="800" /></p><hr><h1 id="2-安装配置"><a href="#2-安装配置" class="headerlink" title="2. 安装配置"></a>2. 安装配置</h1><p>在使用这个开源项目之前，我们需要先安装 <strong>conda</strong> 来管理 Python 环境。</p><ol><li><p>打开它的<a href="https://docs.conda.org.cn/projects/conda/en/stable/index.html">官方文档</a>，选择自己的系统来安装即可。当然，安装 <strong>Anaconda</strong> 也是可以的。</p></li><li><p>复制项目的 SSH 网址，先把代码克隆到本地。下载完成后，<code>cd</code> 进入到项目文件夹。</p></li><li><p>执行以下 conda 命令，创建一个名字叫 <code>open_manus</code> 的 Python 3.12 环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n open_manus python=3.12<br></code></pre></td></tr></table></figure></li><li><p>然后激活这个 Python 环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate open_manus<br></code></pre></td></tr></table></figure></li><li><p>接着使用 <code>pip</code> 安装项目依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>这里有 2 个库需要单独安装一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install browser-user <br>playwright install<br></code></pre></td></tr></table></figure><p>这 2 个库是用来操作浏览器的。执行以下命令，验证 <code>playwright</code> 是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">playwright --version<br></code></pre></td></tr></table></figure><p><strong>如果输出了版本号，说明已经安装成功了。</strong></p></li></ol><img src="https://tyxiaoming.top/OpenManus/安装依赖.png" alt="安装依赖" width="800" />   <p>然后使用 VSCode 打开这个项目。在使用之前，还需要修改一些配置:<br></p><ul><li>打开 <code>config</code> 文件夹下面的 <code>config.example.toml</code> 文件。</li><li>找到 <code>llm</code> 配置项，把 AI 模型参数替换成自己的，比如这里使用 <code>gpt-4o-mini</code> 模型。</li><li>填入 ChatGPT API 的 <strong>base URL</strong> 和 <strong>API Key</strong>。</li><li>修改完以后，要记得 <strong>重命名</strong> 这个配置文件为 <code>config.toml</code>。</li></ul><img src="https://tyxiaoming.top/OpenManus/配置文件.png" alt="配置文件" width="800" />---<h1 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h1><p>现在就可以开始使用这个 <strong>开源版 Manus</strong> 了。</p><ol><li><strong>激活 open_manus 这个 Python 3.12 环境</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate open_manus<br></code></pre></td></tr></table></figure></li><li><strong>执行 <code>main.py</code> 文件，启动成功！</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python main.py<br></code></pre></td></tr></table></figure></li><li><strong>输入要执行任务的提示词，按回车就会自动执行任务了。</strong></li></ol><p>下面我们用几个不同场景的任务，来测试 OpenManus 的效果。首先来测试，它的演示视频提供的例子。</p><h3 id="测试-1：分析个人网站的-SEO-优化建议"><a href="#测试-1：分析个人网站的-SEO-优化建议" class="headerlink" title="测试 1：分析个人网站的 SEO 优化建议"></a><strong>测试 1：分析个人网站的 SEO 优化建议</strong></h3><p>让它分析 <a href="https://karpathy.ai/"><strong>karpathy</strong></a> 的个人网站，并给出一些 <strong>SEO 优化建议</strong>。<br><br>任务开始执行了，但过程可能会比较慢，这可能和 API 的响应速度有关。执行任务，它成功启动了浏览器(代码经过cursor修复)，并打开了 <strong>karpathy</strong> 的个人博客。按照要求，它进行了各方面的分析，并最终生成了一个 <strong>Markdown</strong> 格式的报告文件。<br><img src="https://tyxiaoming.top/OpenManus/任务1.png" alt="任务1" width="800" /><br>打开报告文件，发现它对博客从 <strong>标题、标签、内容质量、移动端适配、加载速度</strong> 等方面进行了分析，并给出了一些优化建议。<br><img src="https://tyxiaoming.top/OpenManus/报告.png" alt="分析报告" width="800" /></p><h3 id="测试-2：分析-YouTube-频道“零度解说”"><a href="#测试-2：分析-YouTube-频道“零度解说”" class="headerlink" title="测试 2：分析 YouTube 频道“零度解说”"></a><strong>测试 2：分析 YouTube 频道“零度解说”</strong></h3><p>第二个任务我们让它在 YouTube 中搜索“零度解说”的视频。读取前 20 个视频，分析其风格和特点，并生成报告。它会自动打开浏览器并执行搜索。任务执行成功，生成了一个 <strong>Markdown</strong> 格式的报告。<br><img src="https://tyxiaoming.top/OpenManus/任务2.png" alt="任务2" width="800" /><br>可以看到报告中包括：</p><ul><li>频道定位：一个分享网络知识的 YouTube 频道。</li><li>视频风格分析：时长、视觉效果、互动性、更新频率等等。</li><li>热门视频列表和总结。</li></ul><p><strong>效果看起来不错！</strong><br><img src="https://tyxiaoming.top/OpenManus/报告2.png" alt="报告2" width="800" /></p><h3 id="测试-3：更细致地分析零度解说的视频"><a href="#测试-3：更细致地分析零度解说的视频" class="headerlink" title="测试 3：更细致地分析零度解说的视频"></a><strong>测试 3：更细致地分析零度解说的视频</strong></h3><p>第三个任务让它打开零度解说的 YouTube 主页。分析前 <strong>30</strong> 个视频的时长、播放数、发布日期、标签等。<br><img src="https://tyxiaoming.top/OpenManus/任务3.png" alt="任务3" width="800" /></p><p>任务执行成功，生成了一个报告。但发现一个问题：分析的视频数量不足 <strong>30</strong> 个，后面的数据用省略号代替了。但是后面还是按要求，给出了视频分析和建议。<br><img src="https://tyxiaoming.top/OpenManus/报告3.png" alt="报告3" width="800" /></p><h3 id="测试-4：代码生成"><a href="#测试-4：代码生成" class="headerlink" title="测试 4：代码生成"></a><strong>测试 4：代码生成</strong></h3><p>第四个任务，让它写一个贪吃蛇游戏。结果代码没有自动保存到文件，实现效果也不好。<strong>可能是由于使用的模型能力有限(gpt-4o-mini)</strong><br><img src="https://tyxiaoming.top/OpenManus/任务4.png" alt="任务4" width="800" /></p><h3 id="测试-5：操作本地文件"><a href="#测试-5：操作本地文件" class="headerlink" title="测试 5：操作本地文件"></a><strong>测试 5：操作本地文件</strong></h3><p>第五个任务让它读取 README 文件中的视频链接，并下载视频。<br><br><strong>结果：没有执行成功！</strong><br><img src="https://tyxiaoming.top/OpenManus/任务5.png" alt="任务5" width="800" /></p><hr><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p><strong>Open Manus</strong> 确实可以使用自然语言，让 AI 实现一些自动化操作。但与 <strong>Manus</strong> 宣传的效果相比，还有一定差距。GitHub 上有不少类似的 开源项目。比如我们之前介绍过的 <a href="https://github.com/browser-use/web-ui">web-ui</a> 项目，效果就挺不错。<br><br>好了，关于 <strong>Open Manus</strong> 这个开源工具我们就介绍完了。欢迎关注我，持续分享使用的IT和AI技能！</p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>告别虚拟机，在浏览器中运行 Linux ！无需安装配置，打开网页就能用！超方便</title>
    <link href="/2025/03/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E8%BF%90%E8%A1%8CLinux/"/>
    <url>/2025/03/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E8%BF%90%E8%A1%8CLinux/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/leaningtech/webvm">webVM</a> 是一个完全运行在浏览器里的 Linux 虚拟机，不需要安装系统，也不需要配置环境。只需打开浏览器，就可以直接运行一个完整的 Linux 虚拟机。<br><br>它不是远程连接到某个 Linux 服务器，而是真正将 Linux 运行在本地浏览器中。webVM 基于 HTML5 和 WebAssembly，能够完美兼容 Linux ABI，直接运行未经修改的 Debian 发行版，并内置了多个常用的开发工具链，比如 Python、GCC、vim 等等。<br><img src="https://tyxiaoming.top/webVM/webVM效果.png" alt="webVM 介绍" width="650" /></p><hr><h2 id="1-webVM-架构"><a href="#1-webVM-架构" class="headerlink" title="1. webVM 架构"></a>1. webVM 架构</h2><p>webVM 的核心架构由四个模块组成：</p><ol><li><p><strong>CheerpX 虚拟引擎</strong><br>一个基于 WebAssembly 的虚拟化引擎，也是 webVM 的核心。它包含一个 X86 到 WebAssembly 的 JIT 编译器，能够将 x86 指令集转换为 WebAssembly，使 Linux 代码可以在浏览器中运行。</p><img src="https://tyxiaoming.top/webVM/引擎2.png" alt="CheerpX" width="650" /></li><li><p><strong>虚拟存储后端</strong><br>负责文件和数据管理，确保 webVM 在运行时能高效读写数据。</p></li><li><p><strong>网络传输层</strong><br>基于 Tailscale 的网络通信架构，提供稳定、安全的网络通信。</p></li><li><p><strong>终端模拟器</strong><br>由 HTML 和 xterm 组成，让用户可以直接在浏览器中使用完整的 Linux 终端，无论是编写代码还是执行 Linux 命令，都能获得流畅的体验。</p><img src="https://tyxiaoming.top/webVM/架构2.png" alt="webVM 架构" width="650" /></li></ol><hr><h2 id="2-webVM-优点"><a href="#2-webVM-优点" class="headerlink" title="2. webVM 优点"></a>2. webVM 优点</h2><p>由于 webVM 完全部署在本地浏览器中，相比传统的 Linux 虚拟机部署方式，它具有以下优点：</p><ol><li><p><strong>部署简单</strong><br>不需要安装 VMware、VirtualBox 等虚拟机软件，直接使用浏览器即可完成部署。</p></li><li><p><strong>即开即用</strong><br>只需在浏览器中打开对应的网址，就可以开始使用 Linux。</p></li><li><p><strong>跨平台</strong><br>Linux 运行在浏览器中，无论是 MacOS、Linux 还是 Windows，只要电脑安装了浏览器，都可轻松部署；甚至移动端的 iOS 和安卓也能运行。</p></li></ol><hr><h2 id="3-部署-webVM"><a href="#3-部署-webVM" class="headerlink" title="3. 部署 webVM"></a>3. 部署 webVM</h2><p>webVM可以通过它的 GitHub 开源项目去<a href="https://webvm.io/">在线体验</a>。项目中内置了 Python、GCC、Node.js 等开发工具，并在左侧展示系统状态信息，甚至支持使用 Claude AI 来操控 Linux。<br><br>那如何使用 webVM 部署一个 Linux 虚拟机呢？webVM 目前支持两种部署方式：</p><ul><li><p><strong>GitHub Actions 部署</strong><br>操作简单，适合希望快速上手、无需复杂配置的用户。</p></li><li><p><strong>本地部署</strong><br>适用于需要更多系统权限或进行自定义配置的用户，但需要用户下载镜像文件、配置环境并启动服务器，对不熟悉服务器配置的用户来说门槛较高。</p></li></ul><p>这里我们采用 GitHub Actions 部署方式，整个流程在所有操作系统中都是相同的，真正实现了多平台兼容。</p><p><strong>部署步骤：</strong></p><ul><li><p><strong>Fork 项目：</strong><br>首先 fork 项目到自己的代码仓库，点击 fork 后再点击 “Create fork”。</p></li><li><p><strong>设置 Pages：</strong><br>fork 完成后，进入仓库设置，在左侧找到 Pages，选择 Source 为 GitHub Actions。</p><img src="https://tyxiaoming.top/webVM/action1.png" alt="GitHub Action" width="650" /></li><li><p><strong>允许工作流：</strong><br>点击上方的 Actions，允许执行工作流。</p></li><li><p><strong>启动部署：</strong><br>点击左侧的 Deploy，再点击右侧的 Run workflow。这里 Dockerfile 和 image size 保持默认，点击执行 workflow。</p><img src="https://tyxiaoming.top/webVM/action2.png" alt="开始部署" width="650" /></li><li><p><strong>等待部署完成：</strong><br>等待几分钟后，打开 deploy 工作流，可以看到部署正在进行中。部署完成后，会生成一个 Linux 虚拟机的网址。</p><img src="https://tyxiaoming.top/webVM/action3.png" alt="完成部署" width="650" /></li><li><p><strong>体验 Linux：</strong><br>打开网址后，执行几条 Linux 命令来试一下。注意：第一次执行命令时可能比较慢，第二次执行同类命令速度就会快很多。这是因为 webVM 采用了按需加载机制，只有在需要使用某个资源时才加载，而不是在系统启动的时候，就一次性加载所有资源，从而大大缩短了加载时间，使系统运行更加流畅。<br><br>在这个examples文件夹里面，内置了一些不同语言的代码。我们来执行一下这个，Python 的斐波那契代码试试。执行成功了，由于webVM是按需加载的，所以第一次执行会比较慢。我们再来执行一次，可以发现第二次速度就快很多了。然后再来执行一下，这个c语言的hello world，运行也没有问题。这样我们就可以，使用这个Linux虚拟机，来进行代码开发，或者学习一些，Linux的操作命令了。</p><img src="https://tyxiaoming.top/webVM/使用.png" alt="使用 webVM" width="650" /></li></ul><hr><h2 id="4-webVM-添加文件-预装应用程序"><a href="#4-webVM-添加文件-预装应用程序" class="headerlink" title="4. webVM 添加文件 &amp; 预装应用程序"></a>4. webVM 添加文件 &amp; 预装应用程序</h2><p>除了直接使用 Linux，webVM 还支持给 Linux 添加文件和预装应用程序，方便用户进行个性化配置和开发环境搭建。</p><ul><li><p><strong>添加文件：</strong><br>点击 “Code” 打开 <code>documents</code> 文件夹，其中存放了一些内置文件。如果需要添加新的文件，只需将文件放入该文件夹中。<br>在 <code>examples</code> 文件夹中，存放着各类内置代码（如 Python、C、Node.js 等）。例如，在 <code>Python</code> 文件夹中添加一个 Python 文件：</p><ul><li>点击 “Add file”，选择 “创建新文件”；</li><li>粘贴代码（示例为打印杨辉三角的 Python 代码），输入文件名后点击 “Commit” 就可以了。<br>（也可以使用 Git 命令在本地进行操作。）<img src="https://tyxiaoming.top/webVM/添加文件.png" alt="添加文件" width="650" /></li></ul></li><li><p><strong>预装应用程序：</strong><br>点击 <code>dockerfile</code> 文件夹，打开 Debian mini 文件。如果希望在 Linux 中预装应用程序，可以将相应命令添加到 <code>apt install</code> 语句后面。例如，预装用于下载文件的 wget 工具：</p><ul><li>编辑文件，在 <code>apt install</code> 后添加 <code>wget</code>，然后点击 “Commit”。<img src="https://tyxiaoming.top/webVM/wget.png" alt="安装 wget" width="650" /></li></ul></li></ul><p>部署完成后，重新部署服务。注意：这次可以适当调大 image size，但最好不要超过 950M，因为 GitHub Pages 的部署文件大小限制为 1GB；如果需要更大的 Linux 系统，可选择本地部署的方式。 <br><br>部署完成后，打开 Linux 虚拟机的网址，来验证下 wget 是否成功预装了，并测试添加的 Python 文件（杨辉三角）看能不能正常运行。<br><img src="https://tyxiaoming.top/webVM/效果.png" alt="验证效果" width="650" /></p><hr><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>通过上面的介绍，我们可以发现。webVM 非常适合用于 Linux 教学。它部署便捷、操作简单，而且不受操作系统限制，非常容易上手。除此之外，用户还可以根据教学需要为 Linux 添加各类代码、文档，并预装必要的应用程序，可以极大地提升开发和学习的效率。<br><br>欢迎关注我，持续分享使用的IT和AI技能！</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>顶级PDF翻译整合包：免费+保留排版样式+免安装+AI，堪比专业人工翻译！</title>
    <link href="/2025/03/02/PDF%E7%BF%BB%E8%AF%91%E6%95%B4%E5%90%88%E5%8C%85/"/>
    <url>/2025/03/02/PDF%E7%BF%BB%E8%AF%91%E6%95%B4%E5%90%88%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="PDFMathTranslate-整合包"><a href="#PDFMathTranslate-整合包" class="headerlink" title="PDFMathTranslate 整合包"></a>PDFMathTranslate 整合包</h2><p>这是 <strong>PDFMathTranslate 一键整合包</strong>，我们只需要双击 <strong>启动.exe</strong>，就可以直接使用它来翻译英文 PDF 文档。<br><img src="https://tyxiaoming.top/PDF翻译整合包/整合包.png" alt="整合包" width="650" /><br>而且翻译后的结果依然保留了原来的排版样式，方便与原文对比阅读，简直是科研党的必备神器。使用这个整合包，不需要安装 Python，也不需要配置任何环境，一键运行即可使用。从此再也不用为各种依赖和版本问题而感到困扰。此外，在这个 PDF 翻译工具中，我们还可以免费调用 AI 大模型的推理和翻译能力。只需要几分钟，就能把一篇英文论文翻译成中文，而且翻译效果堪比专业的人工翻译。<br><img src="https://tyxiaoming.top/PDF翻译整合包/翻译效果.png" alt="翻译效果" width="650" /></p><hr><h2 id="1-下载整合包"><a href="#1-下载整合包" class="headerlink" title="1. 下载整合包"></a>1. 下载整合包</h2><p>下面来介绍如何使用 <strong>PDFMathTranslate 一键整合包</strong>。<br><br>首先，我们打开 <a href="https://github.com/aidayang/PDFMathTranslate-OneClick">GitHub 项目</a>，找到这个整合包。这个整合包其实是对 <a href="https://github.com/Byaidu/PDFMathTranslate"><strong>PDFMathTranslate</strong></a> 开源项目进行封装后开发的。<br><img src="https://tyxiaoming.top/PDF翻译整合包/GitHub项目.png" alt="GitHub项目" width="650" /><br>我们下载作者提供的整合包，下载完成后，它是一个大小约 <strong>300MB</strong> 的压缩文件。先将其全部解压，解压后约 <strong>1GB</strong>，占用空间较大，请确保有足够的存储空间。</p><hr><h2 id="2-使用整合包-谷歌翻译"><a href="#2-使用整合包-谷歌翻译" class="headerlink" title="2. 使用整合包 - 谷歌翻译"></a>2. 使用整合包 - 谷歌翻译</h2><h3 id="运行翻译工具"><a href="#运行翻译工具" class="headerlink" title="运行翻译工具"></a>运行翻译工具</h3><ul><li><p>打开文件夹，找到 <strong>启动软件.exe</strong>，双击运行。</p></li><li><p>弹出的命令行窗口是 <strong>PDFMathTranslate</strong> 服务的后台窗口。如果遇到问题，可以在这里查看报错信息，帮助排查错误。</p><img src="https://tyxiaoming.top/PDF翻译整合包/命令行.png" alt="命令窗口" width="650" /></li><li><p>服务启动成功后，浏览器会自动打开 <strong>本地 7860 端口</strong>，这是 PDF 翻译的操作页面。</p> <img src="https://tyxiaoming.top/PDF翻译整合包/操作页面.png" alt="操作页面" width="650" /></li></ul><h3 id="导入-PDF-文档"><a href="#导入-PDF-文档" class="headerlink" title="导入 PDF 文档"></a>导入 PDF 文档</h3><p><strong>支持两种导入方式：</strong></p><ul><li><strong>本地文件导入</strong>：选择文件后，会在右侧预览区显示 PDF 文档内容，并支持翻页预览。</li><li><strong>在线 PDF 导入</strong>：输入 PDF 的在线网址，翻译工具会先下载PDF再翻译。</li></ul><h3 id="选择翻译服务"><a href="#选择翻译服务" class="headerlink" title="选择翻译服务"></a>选择翻译服务</h3><p>在 <strong>service</strong> 选项中，可以选择 <strong>谷歌翻译、微软翻译</strong> 或 <strong>AI 翻译</strong>。</p><ul><li><strong>如果使用 AI 翻译</strong>，需要填写 <code>base URL</code>、<code>API Key</code> 以及所使用的模型。</li></ul><h3 id="设置翻译语言"><a href="#设置翻译语言" class="headerlink" title="设置翻译语言"></a>设置翻译语言</h3><ul><li><p>默认从 <strong>英文翻译为中文</strong>，支持多种语言，包括日文、法文等。</p></li><li><p>可以选择翻译 <strong>整个 PDF</strong> 或者 <strong>前几页</strong>。</p><img src="https://tyxiaoming.top/PDF翻译整合包/谷歌翻译-File.png" alt="谷歌翻译-File" width="650" /></li></ul><p>点击 <strong>翻译</strong> ，翻译完成后可预览翻译效果，并下载翻译后的 PDF 文档：</p><ul><li><p><strong>mono</strong>：纯中文 PDF。</p></li><li><p><strong>dual</strong>：中英文交叉对照 PDF。</p><img src="https://tyxiaoming.top/PDF翻译整合包/谷歌翻译-File-效果.png" alt="谷歌翻译-效果" width="650" /></li></ul><hr><h2 id="3-使用整合包-AI-翻译"><a href="#3-使用整合包-AI-翻译" class="headerlink" title="3. 使用整合包 - AI 翻译"></a>3. 使用整合包 - AI 翻译</h2><h3 id="AI-翻译-VS-谷歌翻译"><a href="#AI-翻译-VS-谷歌翻译" class="headerlink" title="AI 翻译 VS 谷歌翻译"></a>AI 翻译 VS 谷歌翻译</h3><p>尽管谷歌翻译也能完成 PDF 翻译 ，但由于是机器翻译，有些地方可能不太通顺。我们下面使用 <a href="https://openlm.ai/chatbot-arena"><strong>AI 大模型</strong></a> 进行翻译，并对比2种翻译的效果。这里我们选择使用 <strong>谷歌 Gemini 大模型</strong>，它是唯一一个 <strong>可以免费使用的顶级 AI 大模型</strong>。<br><img src="https://tyxiaoming.top/PDF翻译整合包/Gemini.png" alt="AI模型排行" width="650" /><br>但是 <strong>Gemini API</strong> 在国内无法直接调用，需要自己部署<a href="https://dash.cloudflare.com/"> <strong>API 中转服务</strong></a>。关于如何部署中转服务，我们在上一篇文章中有介绍过。<br><img src="https://tyxiaoming.top/PDF翻译整合包/worker.png" alt="中转服务" width="650" /></p><h3 id="配置-Gemini-AI-翻译"><a href="#配置-Gemini-AI-翻译" class="headerlink" title="配置 Gemini AI 翻译"></a>配置 Gemini AI 翻译</h3><ol><li><p><strong>选择翻译服务</strong>：选择 <strong>OpenAI</strong>（因为 Gemini API 中转服务会将 Gemini API 转换为 OpenAI 格式）。</p></li><li><p><strong>配置 API</strong>：</p><ul><li><strong>Base URL</strong>：替换为自定义的 API 中转服务域名。</li><li><strong>API Key</strong>：前往 <a href="https://aistudio.google.com/"><strong>Google AI Studio</strong></a> 申请并复制 API Key。</li><li><strong>选择模型</strong>：使用 <code>gemini-2.0-flash-exp</code>，也可以根据需要选择其他模型。</li></ul><img src="https://tyxiaoming.top/PDF翻译整合包/AI翻译.png" alt="AI翻译" width="650" /></li></ol><h3 id="AI-翻译效果对比"><a href="#AI-翻译效果对比" class="headerlink" title="AI 翻译效果对比"></a>AI 翻译效果对比</h3><p>翻译完成后，我们来对比下 AI 翻译与谷歌翻译的效果：</p><ul><li><p><strong>AI 翻译更加通顺，语境连贯</strong>。</p></li><li><p><strong>专业术语翻译更准确</strong>，如：</p><ul><li>“Attention is all you need”<ul><li>谷歌翻译：注意力就是你所需要的</li><li>AI 翻译：注意力机制是你所需要的</li></ul></li><li><strong>Abstract</strong><ul><li>谷歌翻译：抽象的</li><li>AI 翻译：摘要（正确）</li></ul></li></ul><img src="https://tyxiaoming.top/PDF翻译整合包/效果对比.png" alt="效果对比" width="650" /></li><li><p>对 Transformer 架构的介绍，AI 翻译也更加专业。</p><img src="https://tyxiaoming.top/PDF翻译整合包/效果对比2.png" alt="效果对比2" width="650" /></li></ul><h3 id="Gemini-API-访问限制"><a href="#Gemini-API-访问限制" class="headerlink" title="Gemini API 访问限制"></a>Gemini API 访问限制</h3><p>Gemini API <strong>每分钟和每天</strong> 的调用次数都有限制：</p><ul><li><code>gemini-2.0-flash</code> <strong>每分钟最多调用 15 次，每天 1500 次</strong>。</li><li><code>gemini-2.0-flash-exp</code> <strong>每分钟最多 10 次，每天 1500 次</strong>。</li></ul><p>下图就是我们使用的<code>gemini-2.0-flash-exp</code>模型，其它模型的限额也都可以查看。<br><img src="https://tyxiaoming.top/PDF翻译整合包/免费额度.png" alt="免费额度" width="650" /> </p><p>如果超出限制，会出现 <strong>429 错误（资源耗尽）</strong>。但 <strong>PDFMathTranslate 会自动重试</strong>，最终仍能完成翻译。<br><img src="https://tyxiaoming.top/PDF翻译整合包/429错误.png" alt="429错误" width="650" /> </p><p><strong>解决方案：</strong></p><ul><li><strong>交替使用不同模型</strong>，避免触发 API 速率限制。</li><li><strong>拆分 PDF，每次翻译若干页</strong>。</li><li><strong>修改 PDFMathTranslate 代码，降低 API 调用频率</strong>。</li><li><strong>使用本地部署的 AI 大模型</strong>。</li></ul><hr><h2 id="4-退出-PDF-翻译工具"><a href="#4-退出-PDF-翻译工具" class="headerlink" title="4. 退出 PDF 翻译工具"></a>4. 退出 PDF 翻译工具</h2><p>使用完以后，直接关闭命令行窗口，即可退出 PDFMathTranslate。</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>这次我们介绍了 <strong>PDFMathTranslate 一键整合包</strong> 的使用方法，以及如何搭配 <strong>AI 翻译</strong> 获得更高质量的翻译结果。大家如果有需要，可以使用下方的<a href="https://pan.quark.cn/s/7644b5ce86cb">链接</a>下载使用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谷歌顶级AI大模型Gemini API：国内免费爽用！Cloudflare中转，AI对话+AI识图+AI编程+AI翻译，全支持！</title>
    <link href="/2025/02/27/Gemini-API%E4%B8%AD%E8%BD%AC/"/>
    <url>/2025/02/27/Gemini-API%E4%B8%AD%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="免费使用谷歌Gemini-API"><a href="#免费使用谷歌Gemini-API" class="headerlink" title="免费使用谷歌Gemini API"></a>免费使用谷歌Gemini API</h1><p>在目前排名前几位的<a href="https://openlm.ai/chatbot-arena/">主流AI大模型</a>中，谷歌的Gemini是唯一一个提供免费API服务的一线顶级AI大模型。<br><img src="https://tyxiaoming.top/Gemini中转/模型排行.png" alt="模型排行" width="700" /><br>通过使用Gemini的免费API，你可以在AI客户端中和大模型对话、编写代码，开发自己的AI应用，甚至结合沉浸式翻译，实现一键翻译任何资料。本文将为大家介绍如何免费使用Gemini的API服务。</p><h1 id="创建API-KEY"><a href="#创建API-KEY" class="headerlink" title="创建API KEY"></a>创建API KEY</h1><p>首先，我们需要打开谷歌的<a href="https://aistudio.google.com/">AI Studio</a>网站。在这里，我们可以选择不同版本的Gemini模型进行对话。例如，我们选择Gemini-2.0-flash-thinking-exp模型。<br><img src="https://tyxiaoming.top/Gemini中转/选择模型.png" alt="选择模型" width="700" /><br>然后我们让它编写一首英文的藏头诗，要求每句的第一个字母能够组成单词“Apple”。可以看到，生成结果完全符合要求。<br><img src="https://tyxiaoming.top/Gemini中转/藏头诗.png" alt="藏头诗" width="700" /><br>除了对话，AI大模型还可以通过API调用的方式使用。点击“Get API Key”按钮，然后选择“创建API Key”，并将其关联到一个项目。点击创建后，API Key就创建完成了，点击复制保存。需要注意的是，Gemini的API Key与OpenAI的不同，它不是一次性显示的。如果需要查看，可以在后续页面中再次查看。<br><img src="https://tyxiaoming.top/Gemini中转/创建API KEY.png" alt="创建API KEY" width="700" /></p><h1 id="免费额度"><a href="#免费额度" class="headerlink" title="免费额度"></a>免费额度</h1><p>在API的付费方案中，我们看到当前使用的是免费的方案。如果你不希望付费使用，记得检查你的谷歌账号是否绑定了支付方式。否则，一旦API调用超出免费额度，账号将会被扣费。<br><img src="https://tyxiaoming.top/Gemini中转/结算.png" alt="结算" width="600" /><br>点击“查看使用情况”可以查看API的调用统计。Gemini的API有免费额度，超出后会产生费用。那么，免费额度是多少呢？返回对话页面，点击“Model”可以看到详细信息。不同版本的模型，每天的免费使用额度有所不同。例如，Gemini 2.0 flash模型每分钟最多可以调用15次，每天最多1500次；Gemini 2.0 flash lite模型每分钟最多可以调用30次，每天同样最多1500次。<br><img src="https://tyxiaoming.top/Gemini中转/flash额度.png" alt="flash模型额度" width="700" /><br>对于个人使用来说，这个免费额度是足够的。而且Gemini提供了多种模型，我们可以根据需要来交替使用。</p><h1 id="原生API使用"><a href="#原生API使用" class="headerlink" title="原生API使用"></a>原生API使用</h1><p>接下来，我们来看下如何使用Gemini的API。我们这里使用<a href="https://chatboxai.app/zh">Chatbox</a>这个AI客户端软件，它是开源的，而且主流操作系统基本都支持。打开Chatbox后，点击左下角的设置，选择“谷歌Gemini”作为模型提供方。然后，输入我们刚才创建的API Key并保存。<br><img src="https://tyxiaoming.top/Gemini中转/Gemini配置.png" alt="Gemini配置" width="700" /><br>接下来，我们选择Gemini-2.0-flash-thinking-exp模型，提出一个逻辑推理问题：</p><blockquote><p>“在厨房里有一张桌子，上面放着一个杯子，杯子里有一个球。把杯子移到卧室的床上并倒过来，再把杯子拿到主房间。问：球现在在哪里？”</p></blockquote><br><img src="https://tyxiaoming.top/Gemini中转/逻辑测试.png" alt="逻辑测试" width="700" /><p><br>可以看到，模型正确地回答了：球会留在床上。但需要注意的是，Gemini的API在国内是无法直接使用的。我们当前挂着梯子，所以API调用正常。如果关闭梯子，API将无法调用。<br></p><br><img src="https://tyxiaoming.top/Gemini中转/卡住.png" alt="卡住" width="700" /><h1 id="免费部署中转API服务"><a href="#免费部署中转API服务" class="headerlink" title="免费部署中转API服务"></a>免费部署中转API服务</h1><p>那如果想要在国内调用Gemini的API，该怎么办呢？我们可以通过<a href="https://dash.cloudflare.com/">Cloudflare</a>，搭建一个免费的API中转服务来解决。我们使用<a href="https://github.com/PublicAffairs/openai-gemini">OpenAI-Gemini</a>这个GitHub开源项目，它能够将Gemini的API请求转为OpenAI格式，并提供多种免费部署方案，包括Vercel、Netlify和Cloudflare。<br><img src="https://tyxiaoming.top/Gemini中转/gemini-openai.png" alt="gemini-openai" width="700" /><br>在项目中，我们选择使用Cloudflare部署。首先，需要准备一个GitHub账号、Cloudflare账号和一个托管到Cloudflare的域名。具体的部署流程是：通过GitHub Actions将OpenAI-Gemini项目部署到Cloudflare，之后，我们就可以通过Cloudflare上部署的API中转服务，正常调用谷歌的Gemini API服务了。<br><img src="https://tyxiaoming.top/Gemini中转/中转流程.png" alt="流程" width="700" /></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，确保你有以下账户和工具：</p><ul><li><strong>GitHub账户</strong>：用于托管代码并管理部署流程。</li><li><strong>Cloudflare账户</strong>：用于配置API中转服务。</li><li><strong>域名</strong>：需要把域名托管到Cloudflare上。</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>点击这个 “Deploy with Workers”。再点击 “Authorize Workers”，点击 “Authorize Cloudflare”。然后输入 GitHub 的密码，点击确认。<br><img src="https://tyxiaoming.top/Gemini中转/authorize workers.png" alt="authorize workers" width="700" /><br>点击 “I have an account”，这里需要我们输入 Cloudflare 的，Account ID 和 API Token。点击下面这 2 个链接，就可以跳转到对应的获取页面。<br><img src="https://tyxiaoming.top/Gemini中转/accountID1.png" alt="account ID" width="700" /><br>首先来获取 Account ID，点击左侧这个链接。然后复制这个账户 ID，这就是我们需要的 Account ID。<br><img src="https://tyxiaoming.top/Gemini中转/accountID.png" alt="account ID" width="700" /><br>在这里粘贴进去，然后点击右侧这个链接，来获取 API Token。<br><img src="https://tyxiaoming.top/Gemini中转/API TOKEN1.png" alt="API TOKEN" width="700" /><br>点击 “创建令牌”，然后选择 “编辑 Cloudflare Workers”，点击右侧这个，使用模板。权限这里保持默认，账户资源，选择 “全部账户”。区域资源这里，可以选择 “全部区域”，也可以选择 “特定区域”。这个特定区域，就是指定一个具体的域名。这里我们选择 “全部区域”，下面这些都保持默认。点击 “继续”，再点击 “创建令牌”。复制这个 API Token，然后粘贴到部署页面。<br><img src="https://tyxiaoming.top/Gemini中转/API TOKEN2.png" alt="API TOKEN" width="700" /><br>点击 “Connect Account”，再点击这个 “Fork Repository”。这个 “Fork Repository”，会把 OpenAI-Gemini 这个开源项目，Fork 一份到我们的代码仓库。然后点击这个 “Enable Workflows”，这个 “Enable Workflows”，就是使用 GitHub 的 Actions 功能，把刚才 Fork 的项目，部署到 Cloudflare 上。<br><img src="https://tyxiaoming.top/Gemini中转/workflows2.png" alt="workflows" width="700" /><br>点击 “I understand” 进行确认，打开我们的代码仓库。就可以看到，刚才 Fork 到，我们代码仓库的OpenAI-Gemini项目。点击 “Workflow Enable”，再点击 “Deploy”。现在开始部署服务了，我们等待几分钟，服务就会部署成功了。<br><img src="https://tyxiaoming.top/Gemini中转/部署成功.png" alt="部署成功" width="700" /></p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>点击这个 Worker Dash，跳转到 Cloudflare。可以看到，这个 Gemini，就是我们刚才部署的服务。点击打开它，再点击设置。在“域和路由”这里，Cloudflare 给这个服务分配了一个域名。但是这个域名，只有外网才能访问，国内网络无法访问。所以我们要给这个服务，添加一个自定义域名。</br><br>这里我们需要有一个，托管到 Cloudflare 的域名。关于如何获取一个，永久免费的域名，并托管到 Cloudflare，可以看这篇文章。<br><img src="https://tyxiaoming.top/Gemini中转/域名注册.png" alt="域名注册" width="700" /><br>在我们托管到 Cloudflare 的域名中，选择一个，复制它。然后点击右上角的“添加”，选择“自定义域”。输入我们的域名，前面可以给它加一个 Gemini 前缀，方便区分。点击“添加域”，这个自定义域名就 OK 了。<br><img src="https://tyxiaoming.top/Gemini中转/自定义域.png" alt="自定义域" width="700" /></p><h1 id="使用中转服务"><a href="#使用中转服务" class="headerlink" title="使用中转服务"></a>使用中转服务</h1><p>下面我们来测试一下，我们部署的这个，Gemini API 中转服务。</p><h2 id="在Chatbox中使用"><a href="#在Chatbox中使用" class="headerlink" title="在Chatbox中使用"></a>在Chatbox中使用</h2><p>首先打开 Chatbox，点击左下角的设置。服务提供方，选择“添加自定义服务提供方”，名字叫做 Gemini。API 模式选择“OpenAI 兼容”，因为我们的中转服务，会把 Gemini API，中转成 OpenAI 的格式。API 域名这里，把这个网址中间的域名部分，替换成我们的自定义域名。</br><br>其余部分保持不动，然后下面填上我们的 Gemini API Key。模型这里，需要手动输入，比如我们使用 gemini-2.0-flash-exp 这个模型。那 Gemini 可选的模型有很多个，大家可以根据自己的需要来选择。<br><img src="https://tyxiaoming.top/Gemini中转/chatbox.png" alt="配置" width="700" /><br>点击保存，下面我们来测试一下。我们现在是挂着梯子的，还是使用之前那个，逻辑推理问题来测试，可以看到 API 能够正常使用。然后把梯子关闭，我们再用一个，赶飞机的时间规划问题来测试一下。API 也是能够正常使用的，而且问题答案也是正确的。那现在，使用我们部署的，API 中转服务，我们就可以在国内，流畅地使用 Gemini 的，免费 API 服务了。<br><img src="https://tyxiaoming.top/Gemini中转/时间规划.png" alt="时间规划" width="700" /><br>除了文本对话，Gemini 的模型还可以识别图片。我们上传一张图片，测试一下。可以看到也没有问题，能够准确地识别出图片中的猫和狗。<br><img src="https://tyxiaoming.top/Gemini中转/图片识别.png" alt="图片识别" width="700" /></p><h2 id="在代码开发中使用"><a href="#在代码开发中使用" class="headerlink" title="在代码开发中使用"></a>在代码开发中使用</h2><p>接下来我们再来看一下，如何在代码开发中，使用我们部署的 API 中转服务。这是 2 个调用 Gemini API 的 <a href="https://pan.quark.cn/s/2cb2bd948103">Python 代码</a>，分别是文本对话和图片识别的代码。这个 config.json 是配置文件，里面存放的是，API 的中转 URL、API Key 以及使用的模型。</br><br>首先来执行这个文本对话，这里我们的问题是，让 Gemini 解释，天空为什么是蓝色的。执行成功了，在返回结果中，给出了问题的答案。然后再来执行这个，图片识别的代码，我们来让它识别这张图片中的动物。也执行成功了，可以看到，它成功识别出了，图片中的狮子和老虎。代码调用没有问题，这样我们就可以使用 Gemini 的 API，来开发自己的 AI 应用了。<br><img src="https://tyxiaoming.top/Gemini中转/代码.png" alt="代码" width="700" /></p><h2 id="在沉浸式翻译中使用"><a href="#在沉浸式翻译中使用" class="headerlink" title="在沉浸式翻译中使用"></a>在沉浸式翻译中使用</h2><ul><li><strong>注意请读完文章再操作，沉浸式翻译中频繁调用Gemini API有封号风险！</strong>🙅‍♂️🚫🚫🚫</li></ul><p>最后我们再来看一下，Gemini API 在沉浸式翻译中的使用。比如我们让它翻译这个 API 文档，点击“沉浸式翻译”插件。翻译服务选择 OpenAI，因为我们的 API 中转服务，会把 Gemini API，转成 OpenAI 格式的。然后选择“自定义 API Key”，下面输入 Gemini API Key。模型这里，点击，“设置更多模型”。输入 gemini-2.0-flash-exp，点击保存，这里也可以选择其他的 Gemini 模型。</br><br>选择我们刚才添加的模型，然后接口地址这里，把网址中间部分的域名，替换成我们 API 中转服务的自定义域名。点一下旁边空白位置，它会自动保存。<br><img src="https://tyxiaoming.top/Gemini中转/翻译配置.png" alt="配置" width="700" /><br>然后我们来翻译这个 API 文档试一下。点击翻译，可以看到翻译了一部分就报错了。显示调用太频繁，超出限制了。还记得我们在前面介绍过，Gemini 的免费 API 是有使用限制的。每分钟调用次数和每天调用次数，都有上限。这里翻译这篇英文的 API 文档，轻易就超出使用限制了。<br><img src="https://tyxiaoming.top/Gemini中转/翻译报错.png" alt="报错" width="700" /><br>看来免费的 Gemini API，并不适合，搭配沉浸式翻译使用。如果频繁调用，导致超出限制，可能会被封号！🙅‍♂️🚫🚫🚫</br><br>如果想要使用，只能通过付费来解除使用限制，或者每次只翻译一部分。</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>通过今天的介绍，我们已经了解了如何免费使用Gemini的API服务，如何在国内通过Cloudflare搭建API中转服务，以及如何在Chat和代码开发中应用这些API。如果对这些内容感兴趣，大家可以自己动手部署一个。文中使用的网址和代码都已提供，仅供大家参考。</p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>梁文峰与DeepSeek：从量化投资到国产AI的崛起之路</title>
    <link href="/2025/02/26/deepseek-%E6%A2%81%E6%96%87%E5%B3%B0/"/>
    <url>/2025/02/26/deepseek-%E6%A2%81%E6%96%87%E5%B3%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="燃爆国产AI"><a href="#燃爆国产AI" class="headerlink" title="燃爆国产AI"></a>燃爆国产AI</h1><p>如果要问国内哪个AI大模型最火？那自然非DeepSeek莫属！</br><br>自从1月份发布DeepSeek R1之后，就彻底燃爆了国产AI。先是不到一周，就引发了英伟达股票暴跌17%。后续更是持续稳居，全球顶级AI大模型<a href="https://openlm.ai/chatbot-arena/">第一梯队</a>。现在各行各业几乎都开始接入或已经接入DeepSeek，而DeepSeek也逐渐成为了国产AI的标杆产品！</br><br><img src="https://tyxiaoming.top/梁文峰/排名.png" alt="Deepseek排名" width="700" /><br>那么能够打造出这样一款，“国运级”AI产品的DeepSeek公司，它的创始人梁文峰是一个怎样的人？他有着什么样的经历？他又是如何组建和管理DeepSeek，以至于能在众多AI产品中脱颖而出的呢？</p><h1 id="梁文峰经历"><a href="#梁文峰经历" class="headerlink" title="梁文峰经历"></a>梁文峰经历</h1><h2 id="求学阶段"><a href="#求学阶段" class="headerlink" title="求学阶段"></a>求学阶段</h2><p>1985年，梁文峰在广东省湛江市出生，父母都是小学老师。<br><img src="https://tyxiaoming.top/梁文峰/湛江.jpeg" alt="湛江" width="700" /><br>2002年梁文峰成功考入浙江大学，主修电子信息工程专业。之后他选择继续深造，在2010年获得信息与通信工程硕士学位，硕士论文题目是：《基于低成本 PTZ 摄像机的目标跟踪算法研究》。<br><img src="https://tyxiaoming.top/梁文峰/论文.webp" alt="论文" width="600" /></p><h2 id="投身金融"><a href="#投身金融" class="headerlink" title="投身金融"></a>投身金融</h2><p>2008年，正值金融危机期间，梁文峰开始探索使用机器学习进行量化交易。毕业后他去往成都创业，在那里尝试将AI应用于不同的领域。但大部分的尝试都以失败收场，直到他开始将AI应用到金融领域。</br><br>2013年，梁文峰开始尝试使用AI来进行量化交易，并和浙大校友徐进一起，创立了杭州雅克比投资管理有限公司。</br><br>2015年，梁文峰和徐进又一起，创立了杭州幻方科技有限公司。也就是今天的浙江九章资产管理有限公司。</br><br>2016年，梁文峰和另外2位同学，共同创立了宁波幻方量化投资管有限公司。这个公司，主要依靠AI和数据分析，来指导投资。</br><br>2019年，梁文峰创立幻方人工智能，开始研究AI算法和AI应用。此时幻方管理的资产已经超过100亿元。当年8月30日，梁文峰发表了题为《程序员视角下中国量化投资的未来》的主题演讲，引发了热烈的讨论。他表示，确定什么是定量或非定量的标准是，投资决策是通过定量方法，还是由人做出。量化基金没有投资组合经理做出决策，而只是服务器。<br><img src="https://tyxiaoming.top/梁文峰/演讲.jpeg" alt="演讲" width="700" /></p><h2 id="转向AI"><a href="#转向AI" class="headerlink" title="转向AI"></a>转向AI</h2><p>2020年，幻方投资数亿元，研发了“萤火一号”AI超级计算机。这台超级设备，占地相当于一个篮球场，计算能力相当于4万台个人PC。</br><br>2021年，梁文峰又带领团队，研发了“萤火二号”，投入超10亿元，搭载了约1万张英伟达A100显卡。同年幻方的资产管理规模也突破了1000亿，成为国内量化私募领域的“四大天王”之一。</br></p><h2 id="创立DeepSeek"><a href="#创立DeepSeek" class="headerlink" title="创立DeepSeek"></a>创立DeepSeek</h2><p>2023年，梁文峰宣布幻方的发展方向，将转向研究通用人工智能，并推出了DeepSeek。而且在美国对中国实施芯片限制之前，幻方已经购入了超过10,000个英伟达 A100 GPU。这为DeepSeek后续研发和训练LLM，提供了稳定的计算资源保障。<br><img src="https://tyxiaoming.top/梁文峰/A100.jpeg" alt="A100 GPU" width="700" /><br>2024年，DeepSeek V2发布，一发布就引发了AI价格战。当时DeepSeek V2 API的定价为：输入，1元&#x2F;百万tokens、输出，2元&#x2F;百万tokens。价格只有GPT-4 Turbo的1&#x2F;100。 同年12月27日，又发布了 DeepSeek V3，并公布了长达53页的训练和技术细节。此时DeepSeek已经确定了，低成本、开源的发展策略。</br><br>2025年，梁文峰受邀出席了李强总理在北京主办的专家、企业家和教科文卫体等领域代表座谈会。并在会上。对2024年度政府工作报告征求意见稿提供了自己的意见和建议！<br><img src="https://tyxiaoming.top/梁文峰/会议.jpg" alt="会议" width="700" /><br>同年1月20日，DeepSeek R1的发布，彻底燃爆了国产AI，这是一个性能比肩OpenAI o1正式版的国产大模型。训练只使用了2048块，符合美国出口管制版本的，英伟达H800 GPU，而训练成本只有OpenAI的1&#x2F;20。<br><img src="https://tyxiaoming.top/梁文峰/H800.png" alt="H800 GPU" width="700" /></p><h1 id="牛人特质"><a href="#牛人特质" class="headerlink" title="牛人特质"></a>牛人特质</h1><h2 id="爱写代码的CEO"><a href="#爱写代码的CEO" class="headerlink" title="爱写代码的CEO"></a>爱写代码的CEO</h2><p>2020年，当时幻方量化的一位员工，曾在公司博客中写道：老板本人每天都自己写代码、跑测试，这是他们与其他公司的不同之处。<br><img src="https://tyxiaoming.top/梁文峰/代码.gif" alt="写代码" width="700" /></p><h2 id="励志改变"><a href="#励志改变" class="headerlink" title="励志改变"></a>励志改变</h2><p>2021年期间，在还未转向AI之前，梁文峰就曾购入数千个英伟达GPU芯片，同时运行 High-Flyer。当时业内人都认为，这只是一个亿万富豪，想要寻找一些新奇的爱好。梁的一些商业伙伴，对他的印象是：一个颇有书生气的年轻人。梁文峰曾对朋友表示，自己想做些什么来改变AI领域的游戏规则。但是他的朋友认为只有阿里、百度这些巨头才有可能做到这一点。</br><br>然而梁文峰没有放弃自己的追求，并通过自己和团队的努力，终于研发出了可以影响整个行业的，顶级AI大模型。</p><h2 id="选用人才"><a href="#选用人才" class="headerlink" title="选用人才"></a>选用人才</h2><p>在选择团队成员上，梁文峰也有自己的一套规则。这主要体现在2方面</p><h3 id="团队本土化"><a href="#团队本土化" class="headerlink" title="团队本土化"></a>团队本土化</h3><p>目前DeepSeek的研发团队，全部都是国内的程序员，没有海归人才。而且大部分都是应届毕业生，或毕业一两年的年轻人。可以说这是一个完全本土化、年轻化的研发团队。<br><img src="https://tyxiaoming.top/梁文峰/合影.jpg" alt="合影" width="500" /></p><h3 id="重视创造性"><a href="#重视创造性" class="headerlink" title="重视创造性"></a>重视创造性</h3><p>据业内人士透露，DeepSeek喜欢招聘工作经历不是那么丰富的人。员工的工作年限一般不超过5年，而那些拥有8年以上研发经验的人，甚至可能会被拒绝。这听起来有些不合理，因为企业都希望招聘经验丰富的人才，来帮助公司更好的发展，为什么DeepSeek会反着来呢？</br><br>据悉DeepSeek主要是担心，工作经验丰富的人包袱太重、缺乏创新的动力。</br><br>梁文峰曾表示：如果追求短期目标，找现成有经验的人是对的。但如果看长远，经验就没那么重要，基础能力、创造性、热爱等更重要。在DeepSeek的研发团队中，很多年轻人都为公司的研发工作做出了重要贡献。比如2024届北大计算机学院软件研究所博士毕业生朱琪豪，2024年北京大学计算机学院计算语言所的博士毕业生代达劢；2023年中山大学博士毕业生郭达雅；以及曾传闻被雷军挖墙脚的，90后AI天才少女罗福莉。（已离职）<br><img src="https://tyxiaoming.top/梁文峰/人员.jpg" alt="成员" width="700" /></p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>梁文峰的成功，离不开他独特的创新精神、坚韧的奋斗历程以及对未来的远见。从早期的量化投资到后来跨足AI领域，他凭借深厚的技术背景和敢于颠覆常规的思维方式，逐步带领团队创造了一个又一个突破。尤其是他对团队的选人标准，注重基础能力和创造性，而非单纯的经验积累，这为DeepSeek的迅速崛起提供了源源不断的创新动力。<br><img src="https://tyxiaoming.top/梁文峰/VS.jpg" alt="VS" width="700" /><br>DeepSeek的成功，既是梁文峰个人坚韧不拔、敢于挑战的缩影，也是中国AI产业逐渐崭露头角的标志。凭借低成本、高性能的技术优势，DeepSeek迅速在全球AI大模型的竞争中占据一席之地，并推动了国产AI的飞跃发展。它不仅是国内AI技术的重要代表，更是对全球AI领域格局的一次深刻冲击，标志着中国在人工智能的竞争中，正逐步迈入顶尖行列。梁文峰和DeepSeek的故事，无疑将成为未来AI发展历程中的一段传奇。</p><p>　　</p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025最新US.KG，永久免费域名注册！托管Cloudflare，国内+国外网络双向互通！</title>
    <link href="/2025/02/25/us-kg%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/"/>
    <url>/2025/02/25/us-kg%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是使用 US.KG 这个网站，注册的一个永久免费域名。把它托管到 Cloudflare 上之后，无论是国外的网络，还是国内的网络，都能够流畅地访问。而且，在 US.KG 上，每个用户都可以免费注册 3 个域名。<br><img src="https://tyxiaoming.top/us.kg域名/效果.png" alt="域名使用" width="700" /><br>下面就来为大家介绍如何使用 US.KG，注册永久免费的域名，并把域名托管到 Cloudflare 上。</p><h1 id="US-KG账号注册"><a href="#US-KG账号注册" class="headerlink" title="US.KG账号注册"></a>US.KG账号注册</h1><p>首先我们打开 <a href="https://register.us.kg/">US.KG</a>。然后点击下面的 Sign Up，注册一个账号。在这里，需要填写我们的注册信息，第一个是 Username。下面的 Full Name，要给它用一个空格分隔开。邮箱这里，我们选择使用 Google 邮箱。<br><img src="https://tyxiaoming.top/us.kg域名/基本信息.png" alt="注册信息" width="700" /><br>下面这个列表中的邮箱，都是可以使用的。大家如果在后面收不到验证邮件，可以使用这个列表中提供的邮箱。<br></br></p><div style="display: flex; justify-content: center; align-items: flex-start;">  <table style="width: 30%; border-collapse: collapse;">    <tr>      <td>      gmail.com      </td>      <td>      outlook.com      </td>    </tr>    <tr>      <td>      yahoo.com      </td>      <td>      hotmail.com      </td>    </tr>    <tr>      <td>      163.com      </td>      <td>      qq.com      </td>    </tr>     <tr>      <td>      126.com      </td>      <td>      icloud.com      </td>    </tr>  </table></div><br><p>然后下面的电话和地址信息，我们使用这个 <a href="https://www.shenfendaquan.com/">身份生成网站</a>，来生成一个美国身份信息。点击刷新按钮，选择一个自己满意的身份信息。<br><img src="https://tyxiaoming.top/us.kg域名/身份生成网站.png" alt="身份生成网站" width="700" /><br>复制电话号码，粘贴到注册信息这里。注意电话号码，要改成上面要求的这种格式。前面添加一个 +1-，然后把电话号码中间的横杠删掉。接下来是地址信息，首先是街道。粘贴过来，后面加一个英文逗号，空格。然后是城市，后面同样加一个英文逗号，空格。最后是州，这样地址信息就 OK 了。<br><img src="https://tyxiaoming.top/us.kg域名/美国身份信息.png" alt="填写美国身份" width="700" /><br>注意这些身份信息，包括用户名、电话、地址，我们要保存到记事本，后面还会用到。<br><img src="https://tyxiaoming.top/us.kg域名/保存身份信息.png" alt="保存身份信息" width="700" /><br>接下来设置密码，密码要求不少于 8 位，而且要包含数字、大写字母以及小写字母。点击人机验证，然后点击注册就可以了。好了到这一步，我们的注册信息就提交上去了。</br><br>接下来我们需要，打开验证邮件，验证一下账号。如果在收件箱没有找到验证邮件，可以去垃圾箱找一找，有时候这个邮件会被归到垃圾邮件里面。点击打开验证网址，显示验证成功了。到这一步，这个账号就注册完成了。再次打开 US.KG，使用刚才注册的账号登录进去。登录成功后，提示我们需要先验证身份。</p><h1 id="US-KG身份认证"><a href="#US-KG身份认证" class="headerlink" title="US.KG身份认证"></a>US.KG身份认证</h1><p>点击验证方式，可以看到，这里只给我们提供了一种验证方式，就是上传 KYC 文件。那这个 KYC 文件，就是身份证明，不要担心，稍后我们会介绍如何制作一个简单的 KYC 文件。<br><img src="https://tyxiaoming.top/us.kg域名/验证方式.png" alt="验证方式" width="700" /><br>点击下面的 Proceed to Default Server。然后把调查表单填一下，用途这里随便填。比如搭建博客，就可以填 blog。文件类型这里，填 Work ID，也就是工作证明。然后下面，需要我们上传一个证明文件。我们打开记事本，找到我们刚才注册账号时，保存的身份信息。这里面，包括用户名、电话、地址。然后我们把身份信息截图保存。<br><img src="https://tyxiaoming.top/us.kg域名/身份截图.png" alt="身份截图" width="700" /><br>在上传证明文件这里，选择刚才保存的截图。看下面的说明，US.KG 它其实是通过 AI 来进行扫描审核的。所以使用这个简单的身份信息截图，就可以通过审核了。<br><img src="https://tyxiaoming.top/us.kg域名/上传验证信息.png" alt="上传验证信息" width="700" /><br>点击提交，执行成功了。</p><h1 id="US-KG域名注册"><a href="#US-KG域名注册" class="headerlink" title="US.KG域名注册"></a>US.KG域名注册</h1><p>我们再次打开 US.KG，可以看到，这里显示，我们可以免费注册 3 个域名。向下滑，点击注册域名。<br><img src="https://tyxiaoming.top/us.kg域名/注册域名.png" alt="注册域名" width="700" /><br>输入域名前缀，点击 Check。我们在 US.KG 注册的域名，都是以 .us.kg 结尾的。可以看到我们这个域名，是可以使用的，没有被人注册过。然后在下面，需要我们提供 2 个名称服务器。<br><img src="https://tyxiaoming.top/us.kg域名/名称服务器.png" alt="名称服务器" width="700" /><br>名称服务器 Name Server，它是 DNS 系统中，用来把域名解析成 IP 地址的服务器。US.KG 这个网站，它只给我们提供了一个二级域名，并不提供域名解析服务。这里我们使用 Cloudflare 提供的名称服务器，来解析域名。</p><h1 id="域名托管到Cloudflare"><a href="#域名托管到Cloudflare" class="headerlink" title="域名托管到Cloudflare"></a>域名托管到Cloudflare</h1><p>打开 Cloudflare，我们接下来把在 US.KG 注册的域名，托管到 Cloudflare 上。点击右上角的加号，选择：现有域。然后在这里输入，我们在 US.KG 注册的域名，点击继续。<br><img src="https://tyxiaoming.top/us.kg域名/托管域名.png" alt="托管域名" width="700" /><br>付费计划，我们选择最下面的免费计划，点击继续。<br><img src="https://tyxiaoming.top/us.kg域名/免费计划.png" alt="免费计划" width="700" /><br>再点击，继续前往激活。弹窗提示我们：无法激活站点。不用管它，直接点击确认。在这里，Cloudflare 给我们提供了 2 个名称服务器。<br><img src="https://tyxiaoming.top/us.kg域名/名称服务器2.png" alt="名称服务器" width="700" /><br>把它们粘贴到 US.KG 的对应位置，点击注册。这样 US.KG 这边的配置，就全部完成了。<br><img src="https://tyxiaoming.top/us.kg域名/完成域名注册.png" alt="完成域名注册" width="700" /><br>回到 Cloudflare，点击继续。再点击，立即检查名称服务器。这里提示我们，域名托管，最多需要 24 小时候才能生效。其实一般，只需要几分钟就会生效了。那域名是否生效，我们主要查看 2 个地方。一个是域名状态这里，要等它变成活动状态。<br><img src="https://tyxiaoming.top/us.kg域名/状态1.png" alt="状态1" width="700" /><br>还有就是 SSL&#x2F;TLS 下面的，边缘证书这里，要等状态变成有效。<br><img src="https://tyxiaoming.top/us.kg域名/状态2.png" alt="状态2" width="700" /></p><h1 id="域名验证"><a href="#域名验证" class="headerlink" title="域名验证"></a>域名验证</h1><p>现在这 2 个状态都生效了，下面我们来测试一下这个域名，看能不能正常访问。我已经把这个域名，设置为了我的博客网站的自定义域。详细操作，在搭建博客那篇文章我们有介绍过，我们使用这个域名访问一下。现在是挂着梯子的，可以看到，是可以正常访问的。然后把梯子关掉，再刷新一下，也是可以正常访问的。<br><img src="https://tyxiaoming.top/us.kg域名/测试域名.png" alt="测试域名" width="700" /><br>那现在我们这个域名，就是双向连通的了。无论国内网络，还是国外网络，都能正常访问。</p><h1 id="域名有效期"><a href="#域名有效期" class="headerlink" title="域名有效期"></a>域名有效期</h1><p>最后我们再来看一下，这个域名的有效期。打开 US.KG，点击我的域名。点击我们注册的这个域名，再点击这个 Renew。可以看到域名的有效期到，2026 年 2 月 16 日。而且，只要在域名过期前 180 天内，点击 Renew，就可以给域名免费续期，相当于就是一个，永久免费的域名了。<br><img src="https://tyxiaoming.top/us.kg域名/域名有效期.png" alt="域名有效期" width="700" /><br>好了关于如何使用US.KG，注册一个永久免费域名，并把它托管到cloudflare上，我们就介绍完了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机部署DeepSeek R1：没有网络也能用|开源免费|无限使用！安卓+iPhone一次搞定</title>
    <link href="/2025/02/07/%E6%89%8B%E6%9C%BA%E9%83%A8%E7%BD%B2deepseek/"/>
    <url>/2025/02/07/%E6%89%8B%E6%9C%BA%E9%83%A8%E7%BD%B2deepseek/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一个部署在手机上的，DeepSeek R1模型。有了它，你就相当于有了一个，可以随时随地、无限免费使用的。本地AI助手，即使在没有网络的情况下。你照样可以，使用它来完成：编写文案，生成代码、翻译外文，等等各种工作。<br><img src="https://tyxiaoming.top/deepseek手机/功能.png" alt="手机部署DeepSeek R1" width="500" /><br>而想要在手机上，部署这样一个AI模型，只需要几分钟，非常的方便。并且对手机的配置，没有要求，市面上常见的手机，基本都可以满足。下面我们就来，为大家介绍，如何在自己的手机上，部署这样一个DeepSeek R1模型。<br><img src="https://tyxiaoming.top/deepseek手机/红米千元机.png" alt="红米千元机" width="500" /></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="安装PocketPal-AI"><a href="#安装PocketPal-AI" class="headerlink" title="安装PocketPal-AI"></a>安装PocketPal-AI</h2><p>首先我们需要在手机上，安装一个AI管理软件。这里我们选择使用这个，<a href="https://github.com/a-ghorbani/pocketpal-ai">PocketPal-AI</a>，也叫做口袋AI。它是一个开源免费的手机端，AI管理和聊天软件，同时支持安卓和iOS，2种系统。在安卓系统上，安装口袋AI，可以通过Google Play来安装。直接搜索软件的名字，然后安装就可以了。<br><img src="https://tyxiaoming.top/deepseek手机/Google Play.png" alt="Google Play" width="500" /><br>但是这种方式，在国内的话，需要使用梯子。如果没有梯子，也可以使用APK文件来安装。口袋AI的apk文件，可以在它的GitHub项目那里下载。或者也可以使用，文章下方提供的，网盘来下载。<br><img src="https://tyxiaoming.top/deepseek手机/开源.png" alt="github" width="500" /><br>如果是iOS系统的话，直接在Apple Store中安装就可以了。<br><img src="https://tyxiaoming.top/deepseek手机/Apple.png" alt="IOS" width="500" /></p><h2 id="加载DeepSeek模型文件"><a href="#加载DeepSeek模型文件" class="headerlink" title="加载DeepSeek模型文件"></a>加载DeepSeek模型文件</h2><p>好了，安装完口袋AI后，下面我们来继续介绍，如何把DeepSeek R1，加载到口袋AI中。接下来的操作，我们直接使用，安卓系统来进行演示。IOS系统的操作流程，和安卓系统是完全一样的，直接照着来就可以了。</br><br>打开口袋AI，点击左上角的三道杠，然后点击models。我们点击右下角的加号，在这里可以选择，从hugging face来添加需要的模型。或者从手机上导入，已经下载好的模型。<br><img src="https://tyxiaoming.top/deepseek手机/hugging face.png" alt="hugging face" width="500" /><br>我们先来看第一种方式，在下面直接搜索我们需要的模型。这里我们选择部署一个，1.5B的DeepSeek R1蒸馏模型。<br><img src="https://tyxiaoming.top/deepseek手机/下载模型.png" alt="1.5B" width="500" /><br>所谓蒸馏模型，在上一篇文章中，我们有介绍过。比如：满血的DeepSeek R1大模型，把它的知识传授给一个小模型。那这个小模型就是，DeepSeek R1的一个蒸馏模型。蒸馏模型的一个好处就是，方便部署，对机器的配置，没有太高的要求。而1.5B代表的是，就是这个蒸馏模型的参数量。B就是billion，所以1.5B就是15亿个参数。</br><br>DeepSeek R1的满血版是671B，也就是6700亿参数，普通的家用电脑是跑不动的。为此DeepSeek R1给我们提供了，1.5B、7B、8B等等，多个标准的蒸馏模型。蒸馏模型的参数量越大，推理能力就越强，当然对设备的要求也就越高。</br><br>那由于手机的处理能力，相对有限，所以我们这里选择使用它的1.5B蒸馏模型。选择一个模型点击打开，可以看到同一个蒸馏模型。还根据量化精度，进行了划分，比如Q4就代表，模型的每个参数，使用4个比特来表示。而Q8则代表，模型的每个参数，使用8个比特来表示。显然Q8比Q4的精度更高，模型推理能力也更强，占用的空间也更大。<br><img src="https://tyxiaoming.top/deepseek手机/Q4.png" alt="量化精度" width="500" /><br>比如我们选择这个Q4的模型，点击下载按钮，等待模型下载完成。<br><img src="https://tyxiaoming.top/deepseek手机/下载过程.png" alt="下载中" width="500" /><br>模型下载完以后，我们回到口袋AI的models里面，在这里就可以看到，刚才下载的模型了。点击这个load，就可以把模型加载进来，加载完成以后，它会自动跳转到聊天页面。在这里，我们就可以和这个，DeepSeek R1模型对话了。<br><img src="https://tyxiaoming.top/deepseek手机/load.png" alt="load" width="500" /><br>上面介绍的这种，添加模型的方式，同样需要有梯子才能访问，hugging face。如果没有梯子，也可以从手机上导入，提前下载好的模型文件。我们点击这个“add local model”，把手机上提前下载的模型文件，添加进去。可以看到，这个是一个Q8的，1.5B模型，大小大概是2个G。<br><img src="https://tyxiaoming.top/deepseek手机/本地文件.png" alt="本地模型文件" width="500" /><br>点击load，把它加载进来。加载完成了后，它会自动跳转到聊天页面。在使用这个模型之前，我们还需要做一些设置。回到models，可以看到，它这里只能加载一个模型。这个Q8的模型，加载完成以后，原来那个Q4的模型，就自动解除加载了。</br><br>点击这个模型的设置，在这里，我们可以根据自己的需要，对模型进行一些配置。<br><img src="https://tyxiaoming.top/deepseek手机/模型设置.png" alt="模型设置" width="500" /><br>比如这个N predict参数，它是模型每次运行时，生成的候选结果的数量。使用这个参数，模型每次会生成，多个可能的答案。并从中挑选出，最符合上下文，或需求的那个答案，这个参数可以适量调大一些。<br><img src="https://tyxiaoming.top/deepseek手机/参数1.png" alt="参数调整" width="500" /><br>再有就是，App设置里面的，这个context size参数。<br><img src="https://tyxiaoming.top/deepseek手机/APP设置.png" alt="APP设置" width="500" /><br>它是模型能够一次处理的，上下文长度，可以理解为模型的记忆大小。如果需要进行多轮对话，或长文本任务。可以把这个参数，适量调大一些。<br><img src="https://tyxiaoming.top/deepseek手机/参数2.png" alt="参数调整" width="500" /></p><h1 id="使用DeepSeek-R1"><a href="#使用DeepSeek-R1" class="headerlink" title="使用DeepSeek R1"></a>使用DeepSeek R1</h1><p>好了，设置完这些参数。下面我们就可以，来使用这个本地部署的，DeepSeek R1模型了。这里我们选择了3种使用场景，来进行演示。分别是：文案编写、代码生成和外文翻译。我们打开飞行模式，下面的操作，都在没有网络的环境下，来进行。<br><img src="https://tyxiaoming.top/deepseek手机/飞行模式.png" alt="飞行模式" width="500" /></p><h2 id="1-文案编写"><a href="#1-文案编写" class="headerlink" title="1.文案编写"></a>1.文案编写</h2><p>首先来看文案编写。打开聊天页面，我们让它来给我们编写一个，面试时自我介绍用的文案模板。首先它会给我们展示，思考过程，比如这类文案模板的结构，是什么样？</br><br>使用什么样的语气比较合适？以及需要注意哪些事项等等。然后它就给我们，编写了这样一个文案模板。看上去效果还不错，只需要再修改一下，就可以使用了。<br><img src="https://tyxiaoming.top/deepseek手机/自我介绍.png" alt="编写文案" width="500" /></p><h2 id="2-生成代码"><a href="#2-生成代码" class="headerlink" title="2.生成代码"></a>2.生成代码</h2><p>接下来，看一下它的代码生成能力。这里我们让它写一个，Python版本的快速排序算法。可以看到，它不只是，直接给出代码那么简单。而是从头到尾帮我们，梳理了一遍快速排序算法的原理，和实现的具体步骤。而且就连代码中，涉及到的一些边界条件等细节，也进行了详细的分析。<br><img src="https://tyxiaoming.top/deepseek手机/代码.png" alt="代码生成" width="500" /><br>如果对代码中的某些地方不理解，还可以继续追问，它会给你一点一点解释清楚。这对于学习算法来说，简直就像有了一个，专业的，私人辅导老师。但是1.5B模型的能力，还是比较有限的。如果让它生成一些，稍复杂的代码，它可能就无法处理的那么好了。</p><h2 id="3-翻译外文"><a href="#3-翻译外文" class="headerlink" title="3.翻译外文"></a>3.翻译外文</h2><p>最后我们再来看一下，它翻译外文的能力。这是一段，特朗普今年，就职美国总统时的，英文演讲稿。我们让它把这段英文，翻译成中文。可以看到，它分析出了，这是一段和美国总统选举有关的，英文演讲。而且其中一些专业术语，也进行了准确的翻译。比如 swing states 翻译成了：摇摆州。翻译完成后的中文，语句之间也很流畅，基本没有问题。<br><img src="https://tyxiaoming.top/deepseek手机/翻译.png" alt="翻译" width="500" /></p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>好了关于在手机上，部署DeepSeek R1模型，我们就介绍这些。那在手机上，部署这样一个AI模型。它的优势就是，小巧、便捷。相当于有了一个，可以放在口袋里的AI助手，随时随地都能拿出来使用。即使没有网络，也照样可以用。</br><br>同时它还是完全免费的，可以无限使用。用来处理，我们日常生活中的一些小需求，真的是非常的方便。大家如果有需要，可以按照文章的介绍，在自己的手机上，也部署一个。</p><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><p>pocketpal-ai APK文件：<a href="https://pan.quark.cn/s/f0a986d9bf8b">https://pan.quark.cn/s/f0a986d9bf8b</a><br>pocketpal-ai GitHub：<a href="https://github.com/a-ghorbani/pocketpal-ai">https://github.com/a-ghorbani/pocketpal-ai</a><br>DeepSeek R1 1.5B Q4模型文件：<a href="https://pan.quark.cn/s/2dbde83928e2">https://pan.quark.cn/s/2dbde83928e2</a><br>DeepSeek R1 1.5B Q8模型文件：<a href="https://pan.quark.cn/s/9b17e6cfcb37">https://pan.quark.cn/s/9b17e6cfcb37</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超简单！低配电脑，本地部署DeepSeek R1！开源免费 | 纯CPU | 新手友好</title>
    <link href="/2025/02/06/R1%E8%92%B8%E9%A6%8F%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%8C%E9%9A%8F%E5%BF%83%E6%89%80%E6%AC%B2/"/>
    <url>/2025/02/06/R1%E8%92%B8%E9%A6%8F%E6%A8%A1%E5%9E%8B%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%EF%BC%8C%E9%9A%8F%E5%BF%83%E6%89%80%E6%AC%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="DeepSeek-R1介绍"><a href="#DeepSeek-R1介绍" class="headerlink" title="DeepSeek R1介绍"></a>DeepSeek R1介绍</h1><p>要说春节这几天，AI圈最火的，就属deepseek推出的<a href="https://api-docs.deepseek.com/zh-cn/news/news250120">R1模型</a>了。<br><img src="https://tyxiaoming.top/deepseek本地/R1.jpg" alt="DeepSeek R1" width="500" /><br>就在前几天，英伟达官网宣布：<br>DeepSeek R1模型，已作为英伟达 <a href="https://build.nvidia.com/deepseek-ai/deepseek-r1">NIM微服务预览版</a>，在它的开发者平台上线，双方开始了技术合作。<br><img src="https://tyxiaoming.top/deepseek本地/invida.png" alt="NIM微服务" width="500" /><br>Meta的创始人，扎克伯格也表示，DeepSeek在基础设施优化方面，取得了”新颖的进展”。并指出这些创新，已经公开发表，Meta可以通过学习相关方法，从中受益。<br><img src="https://tyxiaoming.top/deepseek本地/Meta.png" alt="Meta" width="600" /><br>那么deepseek R1模型，到底有哪些亮眼的地方，能够受到业界的广泛关注呢？<br>根据<a href="https://api-docs.deepseek.com/zh-cn/news/news250120">deepseek官网</a>的介绍，deepseek R1模型，在后训练阶段，大规模使用了强化学习技术。在仅有极少标注数据的情况下，能够极大提升模型的推理能力。在数学、代码、自然语言推理等任务上，性能可以比肩 OpenAI o1 模型正式版。<br><img src="https://tyxiaoming.top/deepseek本地/R1定位.png" alt="DeepSeek R1介绍" width="500" /><br>而且最重要的是，它的训练成本非常低，整个训练过程。只使用了2048块，符合美国出口管制版本的，英伟达H800 GPU，训练时长55天，成本约557万美元。是同类模型成本的 1&#x2F;20，推理成本更是只有 OpenAI 模型的 1&#x2F;30。而且和OpenAI不同，<a href="https://github.com/deepseek-ai">deepseek</a>的模型都是开源的。（虽然叫OpenAI但是一点都不Open）<br><img src="https://tyxiaoming.top/deepseek本地/H800.webp" alt="H800 GPU" width="500" /><br>deepseek R1模型，推出后不到一周，股票市场出现巨大波动。英伟达股票，在1月27日暴跌近17%，市值减少约5900亿美元。这主要是因为，投资者担心deepseek R1的出现，可能会引发AI模型的低成本浪潮。如果是这样，那以后训练大模型，就不再需要太多的高端GPU了，那这势必会影响，英伟达这些公司的发展。<br><img src="https://tyxiaoming.top/deepseek本地/股票.jpg" alt="股票" width="500" /></p><h1 id="DeepSeek-R1本地部署"><a href="#DeepSeek-R1本地部署" class="headerlink" title="DeepSeek R1本地部署"></a>DeepSeek R1本地部署</h1><p>如果想要使用 deepseek R1模型，除了web对话和API，你还可以在本地，自己部署一个蒸馏版的模型。这样使用起来很方便，而且不受线上服务的影响。下面我们就来介绍，如何在本地部署deepseek R1模型。<br><img src="https://tyxiaoming.top/deepseek本地/本地部署demo.png" alt="本地部署demo.png" width="500" /></p><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><p>首先我们需要安装一个，模型管理工具，用来运行和管理本地部署的模型。这里我们选择使用 ollama，它是由Meta研发的，一个开源大模型管理工具。打开<a href="https://ollama.com/">ollama的官网</a>，然后点击下载，根据自己的系统下载对应的安装包。<br><img src="https://tyxiaoming.top/deepseek本地/ollama官网.png" alt="ollama官网" width="500" /><br>下载完以后，安装 ollama 。点击next，然后安装命令行，这样我们就可以在命令行中，和AI进行对话了。然后点击完成，使用<code>ollama run llama3.2</code>这条命令，可以安装llama3.2模型。这里我们先不安装它，直接去安装deepseek R1模型。打开安装好的 ollama，然后在命令行输入 <code>ollama list</code>，可以查看已经安装的模型。可以看到，我们现在还没有安装模型。<br><img src="https://tyxiaoming.top/deepseek本地/ollama list1.png" alt="ollama list" width="500" /><br>接下来，我们来安装deepseek R1模型。在ollama 的官网，点击 models，可以看到，第一个就是deepseek R1模型。点击打开它，在这里可以根据参数量级，来选择模型，最低的是1.5b，最高671b。这里的1.5b到70b这6个模型，并不是满血的 deepseek R1模型。<br><img src="https://tyxiaoming.top/deepseek本地/参数.png" alt="参数选择" width="500" /><br>而是deepseek R1的蒸馏模型，所谓蒸馏模型，简单来说就是。deepseek R1模型把知识，传授给一个小模型。那这个小模型就是， deepseek R1 的一个蒸馏模型。这样可以降低模型的复杂度和计算量，从而提高模型的运行效率。而1.5b、7b、8b这些参数量级，可以理解为，小模型从deepseek R1，学习到的知识量。参数越多，代表学习到的知识越多，推理能力也就越强。<br><img src="https://tyxiaoming.top/deepseek本地/蒸馏模型.jpeg" alt="蒸馏模型" width="500" /><br>比如这个7b的蒸馏模型，就是以千问模型为基底的，一个蒸馏模型。而我们要部署的，就是这些蒸馏版的模型。因为满血的 deepseek R1模型，大小有几百个G，需要超过336G的显存才能运行起来。普通的家用电脑，纯CPU的话是，完全跑不动的，但是我们可以根据，自己的机器配置。选择合适的蒸馏模型来部署，我这里使用的设备，是一台老的MacBook Pro。<br><img src="https://tyxiaoming.top/deepseek本地/MacBook.png" alt="MacBoo" width="180" /><br>CPU配置为4核2G，内存为16G，我这里选择使用这个，7b的蒸馏模型来部署。如果不知道自己的机器，适合部署哪个模型，可以参考这个表格。<br><img src="https://tyxiaoming.top/deepseek本地/config.png" alt="机器配置" width="700" /><br>我们复制<code>ollama run deepseek-r1:7b</code>这条命令，然后以root权限执行它。这里需要输入我们的root密码。这样它就开始下载模型，并进行安装了。<br><img src="https://tyxiaoming.top/deepseek本地/安装命令.png" alt="安装命令" width="500" /><br>安装完成了，可以看到我们现在已经进入到， deepseek R1模型的对话页面了。现在，在命令行，就可以和模型对话了，我们来试一下。可以看到，使用没有问题。<br><img src="https://tyxiaoming.top/deepseek本地/本地测试.png" alt="本地测试" width="500" /><br>但是使用命令行的方式，很不方便，我们下面来看一下。如何和 ChatGPT 一样，在web页面和AI模型对话。首先我们需要安装这个 <a href="https://chromewebstore.google.com/detail/page-assist-%E6%9C%AC%E5%9C%B0-ai-%E6%A8%A1%E5%9E%8B%E7%9A%84-web/jfgfiigpkhlkbnfnbobbkinehhfdhndo?utm_source=ext_app_menu">page assist 浏览器插件</a>。<br><img src="https://tyxiaoming.top/deepseek本地/插件.png" alt="插件" width="500" /><br>然后打开插件，在模型这里，选择我们安装的， deepseek R1 7b模型。然后就可以和ChatGPT一样，在网页中，和deepseek R1模型对话了。下面我们让他实现一个登录页面，来看一下效果怎么样。可以看到处理速度还是比较慢的，而且我这这个设备的CPU，都已经跑的飞起来了。也就勉强能够运行这个7b的模型。<br><img src="https://tyxiaoming.top/deepseek本地/CPU.png" alt="CPU占用" width="500" /><br>代码生成完了，我们下载下来，在浏览器打开看一下。可以看到效果还是可以的，那这个7b的蒸馏模型。它的推理能力还是比较弱的，适合用来处理一些简单的任务。比如AI对话，文案编辑等等。如果需要更强的推理能力，可以部署参数量更大的蒸馏模型。<br><img src="https://tyxiaoming.top/deepseek本地/登录.png" alt="登录页面" width="500" /></p><h2 id="搭配vscode"><a href="#搭配vscode" class="headerlink" title="搭配vscode"></a>搭配vscode</h2><p>最后我们再来看一下，如何把本地部署的这个 deepseek R1 7b模型。加入到vscode中，用来进行代码开发。这里我们介绍2个，常用的AI编程插件，continue和cline。</p><h3 id="1-continue插件"><a href="#1-continue插件" class="headerlink" title="1. continue插件"></a>1. continue插件</h3><p>先来看continue插件，点击上面的：添加一个模型。provider这里选择 ollama，然后下面的models选择 deepseek coder。点击connect，然后需要修改，这个配置文件中的 model的值。<br><img src="https://tyxiaoming.top/deepseek本地/continue.png" alt="continue" width="500" /><br>这个model的值，我们需要从 ollama 来获取，执行 <code>ollama list</code> 命令。然后复制这个 deepseek R1 7b模型的name，回到配置文件。把复制的模型name粘贴进去，然后保存配置文件就可以了。来试一下效果。可以看到，现在continue插件，已经可以使用deepseek R1 7b模型了。<br><img src="https://tyxiaoming.top/deepseek本地/continue2.png" alt="测试" width="500" /></p><h3 id="2-cline插件"><a href="#2-cline插件" class="headerlink" title="2. cline插件"></a>2. cline插件</h3><p>接下来，再来配置 cline 插件。点击插件右上角的设置，api provider这里选择 ollama。然后下面的model ID这里，粘贴上我们上一步，使用<code>ollama list</code>获取到的，模型的name。<br><img src="https://tyxiaoming.top/deepseek本地/cline1.png" alt="cline" width="500" /><br>来测试下效果，可以看到，这里一直卡在API request这一步。不止cline插件，roo code 插件也是一样。<br><img src="https://tyxiaoming.top/deepseek本地/cline2.png" alt="测试" width="500" /><br>在cline的GitHub项目下面的，<a href="https://github.com/cline/cline/issues/1194">issues里面</a>，已经有人反馈了这个问题。目前这个问题，应该还在处理中，具体原因也有待排查。<br><img src="https://tyxiaoming.top/deepseek本地/issues.png" alt="issue" width="500" /><br>大家在cline或roo code插件中，如果遇到这个问题，可以先使用其它本地模型，或者API的方式。等这个问题修复后，再切换成本地deepseek R1模型。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>deepseek R1 是一个，对标OpenAI o1的国产大模型。它的训练成本远低于同类模型，R1 的出现可能会改变：“要形成AI竞争力，就必须依靠大量的GPU和巨额的训练费用”这一现状。也许在以后，性价比将成为AI发展中的一个重要考虑因素吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费PDF翻译神器：保留排版样式，科研党必备！3分钟完成本地部署，无限使用次数</title>
    <link href="/2025/01/22/%E5%85%8D%E8%B4%B9PDF%E7%BF%BB%E8%AF%91%E7%A5%9E%E5%99%A8%EF%BC%9A%E4%BF%9D%E7%95%99%E6%8E%92%E7%89%88%E6%A0%B7%E5%BC%8F%EF%BC%8C%E7%A7%91%E7%A0%94%E5%85%9A%E5%BF%85%E5%A4%87/"/>
    <url>/2025/01/22/%E5%85%8D%E8%B4%B9PDF%E7%BF%BB%E8%AF%91%E7%A5%9E%E5%99%A8%EF%BC%9A%E4%BF%9D%E7%95%99%E6%8E%92%E7%89%88%E6%A0%B7%E5%BC%8F%EF%BC%8C%E7%A7%91%E7%A0%94%E5%85%9A%E5%BF%85%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一篇8页的，英文 PDF 文档。把它放到这个本地部署的，翻译工具里面。只需要6秒，它就会把这篇英文的 PDF，翻译成中文！<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1.png" alt="PDF翻译服务" width="650" /><br>更厉害的是，翻译后的中文 PDF，依然保留了原来的排版样式，这样就很方便和英文 PDF 对比阅读，简直就是科研党的必备神器！而且只需要几分钟，你就可以把这套翻译工具，部署到自己电脑上，操作十分简单、使用完全免费，并且没有翻译次数的限制。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E6%95%88%E6%9E%9C.png" alt="翻译效果" width="650" /></p><h1 id="部署PDF翻译服务"><a href="#部署PDF翻译服务" class="headerlink" title="部署PDF翻译服务"></a>部署PDF翻译服务</h1><p>我们上面看到的翻译工具，就是这个<a href="https://github.com/Byaidu/PDFMathTranslate"> PDFMathTranslate </a>。它是 GitHub 上的一个开源项目，下面我们就来把这套翻译工具，部署到我们自己的电脑上。我们在 readme 切换到，这个项目的中文说明文档。在这里给我们提供了一个，可以免费试用的网址。但是这个网址的服务，已经无法正常使用了，我们还是来自己部署服务。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE.png" alt="试用服务" width="650" /><br>这个 <a href="https://github.com/Byaidu/PDFMathTranslate"> PDFMathTranslate </a>是由 Python 语言实现的，所以要使用它需要预先安装 Python 环境。而且 Python 的版本，要大于 3.8 小于 3.12。如果对 Python 不熟悉也不要紧，现在主流操作系统都内置了 Python。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/Python%E7%89%88%E6%9C%AC.png" alt="Python版本" width="650" /><br>向下拉，可以看到<a href="https://github.com/Byaidu/PDFMathTranslate"> PDFMathTranslate </a>给我们提供了4种使用方式。包括命令行、便携式安装、图形界面和 docker 运行。这里我们选择图形界面的方式，来部署服务。这种部署方式，对操作系统没有限制。<br><br>不论是 Windows、macOS 还是 Linux 都可以按照，文档中的操作步骤来进行部署。可以看到，部署服务的操作很简单，只需要执行2条命令就可以了。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2.png" alt="GUI界面安装" width="650" /><br>打开命令行窗口，执行 <code>pip install pdf2zh</code> 命令，使用pip安装pdf2zh包。安装完成后，然后执行 <code>pdf2zh -i</code>，启动翻译服务。服务启动后，浏览器会自动打开一个网页，这里就是翻译工具的GUI界面了。如果浏览器没有自动打开这个网页，可以手动，在浏览器打开本地网址<font color="#00A2FF"><i><b> <a href="http://localhost:7860/">http://localhost:7860/</a> </b></i></font><br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1.png" alt="PDF翻译服务" width="650" /></p><h1 id="使用PDF翻译服务"><a href="#使用PDF翻译服务" class="headerlink" title="使用PDF翻译服务"></a>使用PDF翻译服务</h1><p>下面我们来认识下，翻译工具的 GUI，左上方是文件上传区。可以选择上传PDF文档，或者是使用PDF文档的在线网址。我们拖一个英文PDF进来，可以看到，在右侧的预览区，显示了文档的内容。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E9%A2%84%E8%A7%88%E6%96%87%E6%A1%A3.png" alt="上传区域" width="650" /><br>翻译服务这里，主要分为2类：</p><ul><li>一类是常用的翻译服务，比如Google翻译、微软翻译等</li><li>另一类是AI翻译服务，比如Deepl、OpenAI等</li></ul><p>如下图所示：<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1%E6%96%B9%E5%BC%8F.png" alt="上传区域" width="650" /><br>使用AI翻译服务，只需要在这里，填上自己的 API key就可以了。经过比较，在翻译专业的学术论文方面，AI翻译比 Google、Bing 这种直译效果效果更好一些。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/AI%E7%BF%BB%E8%AF%91.png" alt="翻译服务方式" width="650" /><br>这里我们选择 Google 翻译来演示，翻译语言也支持很多种，包括中文、英文、日文等等。我们这里选择从英文 PDF，翻译成中文 PDF。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E8%AF%AD%E8%A8%80.png" alt="翻译语言" width="650" /><br>再下面，它甚至还给我们提供了一个，翻译页数的选项。你可以选择翻译整个文档、翻译第一页或者是翻译前5页，我们选择翻译整个文档。我们用来翻译的这个 PDF，是一篇 AI 相关的 paper。里面有一些图表和公式，然后我们点击翻译，右侧可以看到翻译进度。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E8%BF%9B%E5%BA%A6.png" alt="翻译进度" width="650" /><br>翻译结束了，这篇8页的 PDF 用时大概6秒，可以说速度已经很让人满意了。这是翻译后的中文，在左侧还给我们提供了2个，翻译结果的下载链接，一个 mono，一个 dual。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6.png" alt="下载文件" width="650" /><br>我们把它下载下来，然后打开看一下。这个 mono 的 PDF，是翻译后的中文 PDF，可以看到，完全保留了原 PDF 的排版样式。而且文章内容的翻译效果也不错，这能够帮我们，节省大量的阅读时间。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/mono.png" alt="mono" width="650" /><br>我们再打开这个 dual 的 PDF，可以看到这个文档，是英文和中文交替的。如果想在一个文档中，进行对比阅读，就可以使用这个文档。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/dual.png" alt="dual" width="650" /></p><p>除了上面介绍的，这种本地上传 PDF 的方式，还可以使用 PDF 的在线网址。这里有一个<a href="https://arxiv.org/pdf/1706.03762">在线的PDF文档</a>，我们复制它的网址。然后在翻译工具这里，选择 link，把网址粘贴进去，点击翻译。这个15页的英文 PDF，用时大概15秒。可以看到，翻译后的效果也很不错。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E5%9C%A8%E7%BA%BF%E7%BF%BB%E8%AF%91.png" alt="在线翻译" width="650" /></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>上面这些，就是这个翻译工具的，本地部署和使用介绍。如果你有阅读外文 PDF 的需求，可以花几分钟，在自己电脑上部署一套，它能够帮助你节省大量的阅读时间。如果使用后，觉得这个工具还不错，还可以在 GitHub 上，给项目点一个免费的 star ✨✨✨</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建免费个人博博客：Cloudflare+GitHub+Hexo Fluid</title>
    <link href="/2025/01/21/%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/01/21/%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一篇文章，我们已经使用 Cloudflare R2 和 PicGo 搭建了一个<a href="/2025/01/12/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A">免费图床</a>。今天我们来继续完成，博客网站的搭建。作为一个个人博客，我们希望这个网站能够具有以下优点：</p><ol><li>最好是免费的，不需要额外购买云服务器</li><li>维护尽量简单，我们只用它发布文章，不需要太复杂的功能</li><li>网络访问流畅，不论是国内用户还是国外用户，都能访问我们的博客</li></ol><p><font color="#00A2FF"><i><b> 在综合考虑了上面3点要求后，我们最终选择了使用 Cloudflare+GitHub+Hexo Fluid 来搭建博客网站。</b></i></font></p><h1 id="Hexo环境配置"><a href="#Hexo环境配置" class="headerlink" title="Hexo环境配置"></a>Hexo环境配置</h1><p>hexo 是一个快速、简洁，而且功能强大的静态博客框架。我们可以使用 Markdown 编写博客文章，然后 hexo 帮我们把 Markdown 文件渲染成静态 HTML 页面。因此 hexo 非常适合用来搭建技术类博客，以及项目文档和个人网站。</p><h2 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1. 安装 Node.js"></a>1. 安装 Node.js</h2><p>由于 hexo 是基于 Node.js 的，因此要安装 hexo，需要先安装 Node.js 和 npm，然后通过 npm 来安装 hexo。要安装 Node.js ，可以打开<a href="https://nodejs.org/zh-cn">Node.js官网</a>，下载软件然后进行安装就可以了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/nodejs%E5%AE%98%E7%BD%91.png" alt="安装Node.js" width="700" /><br>安装这个软件，会同时安装 node 和 npm 这2个工具。安装完成以后，我们来验证一下是否安装成功了。执行下面的命令，如果能输出版本号，就代表 node 安装成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br></code></pre></td></tr></table></figure><p>接着再执行这条命令，同样如果能输出版本号就证明 npm 也安装成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm -v<br></code></pre></td></tr></table></figure><h2 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2. 安装 Hexo"></a>2. 安装 Hexo</h2><p>下面我们来安装 hexo，需要注意我们这里安装的是 <code>hexo客户端</code> 。安装 hexo 需要使用 npm 命令，但是在国内使用 npm 安装软件，速度很慢。因此我们先执行下面这条命令，给 npm 替换成国内的源，这样安装速度就会快很多了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com <br></code></pre></td></tr></table></figure><p>接着执行下面这条命令，使用 npm 安装 hexo客户端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装好 hexo 以后，执行 <code>hexo init my-blog</code> 初始化 my-blog 文件夹（自定义）。这个文件夹，就是我们的博客项目，用来存放我们的全部博客文章。然后 <code>cd my-blog</code> 进入到文件夹，接着执行 <code>npm install</code> 命令安装依赖包。<br><br>到这里我们的 hexo 环境配置就基本完成了，下面就可以使用它来写文章和发布文章了！👍👍👍<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AEhexo.png" alt="配置hexo" width="700" /></p><h1 id="使用-Hexo-管理博客"><a href="#使用-Hexo-管理博客" class="headerlink" title="使用 Hexo 管理博客"></a>使用 Hexo 管理博客</h1><p>为了方便编辑，我们使用 vscode 打开 my-blog 文件夹。下面来看一下 my-blog 里面的主要组成部分：</p><ol><li>_config.yml：博客的全局配置文件，网站的名称、描述、作者等，都可以在这里进行设置</li><li>source&#x2F;_post：存放我们全部的文章，而且 hexo 自带了一篇 demo 文章 hello-world</li><li>themes：博客的主题配置文件，hexo 有一个默认主题，但不太好看，后面可以改成漂亮一些的主题</li></ol><p>上面这3部分，就是我们使用 hexo 写博客时需要重点关注的地方。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/hexo%E7%BB%93%E6%9E%84.png" alt="hexo组成" width="700" /><br>接着我们执行 <code>hexo generate</code> 和 <code>hexo server</code> 这2条命令，在本地把 hexo 服务跑起来。这样我们就可以，在本地网址的4000端口，预览文章效果。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E5%90%AF%E5%8A%A8hexo.png" alt="运行hexo" width="700" /><br>打开<font color="#00A2FF"><i><b> <a href="http://localhost:4000/">http://localhost:4000/</a> </b></i></font>这个本地网址，已经可以正常访问了，这里就是博客网页的布局。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/hello-world.png" alt="博客预览" width="700" /></p><h1 id="将博客托管到-GitHub-Pages"><a href="#将博客托管到-GitHub-Pages" class="headerlink" title="将博客托管到 GitHub Pages"></a>将博客托管到 GitHub Pages</h1><p>现在我们这个博客，还只能在本地网址预览。下面我们把博客项目托管到 GitHub 仓库，并且使用 GitHub Pages 来部署博客，让其他人也能访问我们的博客网站。</p><h2 id="1-博客项目托管到GitHub"><a href="#1-博客项目托管到GitHub" class="headerlink" title="1. 博客项目托管到GitHub"></a>1. 博客项目托管到GitHub</h2><p>为了方便管理 my-blog 博客项目，我们下一步把这个项目托管到 GitHub 上。首先在 GitHub 上创建一个项目，项目名可以设置为 <code>我们的GitHub用户名.github.io</code>。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E5%88%9B%E5%BB%BAGitHub%E9%A1%B9%E7%9B%AE.png" alt="创建GitHub项目" width="700" /><br>创建完成后，GitHub 给我们列出了一些，快速设置这个仓库的操作指令。我们选择第一种，依次执行它给我们提供的这些命令。需要注意，<code>git add README.md</code> 这条命令我们要替换成 <code>git add .</code> 来把 my-blog 文件夹下的全部文件，都暂存到仓库。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E5%88%9D%E5%A7%8B%E5%8C%96GitHub%E4%BB%93%E5%BA%93.png" alt="创建GitHub项目" width="700" /></p><h2 id="2-使用-GitHub-Pages-部署博客"><a href="#2-使用-GitHub-Pages-部署博客" class="headerlink" title="2. 使用 GitHub Pages 部署博客"></a>2. 使用 GitHub Pages 部署博客</h2><p>执行完配置命令以后，我们就可以使用 git 来管理博客项目了。接下来我们把 my-blog 项目，部署到 GitHub Pages 上。 这样我们的博客，就不再只是一个本地网站了。其他人也可以通过网络，来访问我们的博客。<br><br>首先在 my-blog 项目的 _config.yml 配置文件中，把 git 服务部署的配置加进去。在 type 配置项这里填上 git，然后分别添加一个 repository 和一个 branch 配置，指定部署博客网站时，所使用的 GitHub 项目和对应的分支。repository 这里填 <code>git@github.com:GitHub用户名/GitHub仓库名</code>，branch 这里指定 <code>main</code> 分支，然后保存配置。<br><br>最后我们执行 <code>npm install hexo-deployer-git --save</code> 命令，安装 hexo-deployer-git 这个插件，来简化部署到 GitHub Pages 的流程。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/GitHub%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE.png" alt="GitHub部署配置" width="700" /><br>这样配置完以后，我们就可以在本地写文章，写完以后通过 <font color="#00A2FF"><i><b><a href="http://localhost:4000/">http://localhost:4000/</a></b></i></font> 预览文章效果并进行修改。修改满意后，就可以部署到 GitHub Pages 这样其他人就能访问我们的博客了。我们来看一下使用流程：<br><br>首先我们使用 <code>hexo new post 文章标题</code>，来创建一篇新文章。这样操作后，hexo 就会在 source&#x2F;_post 下面，给我们生成一个新文件来编辑这篇文章。我们使用上一篇文章，搭建的 <a href="/2025/01/12/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A">免费图床</a> 来简单编辑一下这篇新文章。MarkDown 本地渲染一下，显示正常。然后执行这个三合一命令，把文章发布到 GitHub Pages。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><ul><li>hexo clean：清除缓存，简写 hexo -c</li><li>hexo generate：生成渲染，简写 hexo -g</li><li>hexo deploy：部署到 GitHub Pages，简写 hexo -d</li><li>hexo server：启动本地预览，简写 hexo -s</li></ul><p>发布完成后，打开 <code>https://github用户名.github.io/</code> 这个网址，就可以访问我们的在线博客了！👌<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/GitHubPages.png" alt="GitHubPages" width="700" /></p><h1 id="使用-Cloudflare-加速访问"><a href="#使用-Cloudflare-加速访问" class="headerlink" title="使用 Cloudflare 加速访问"></a>使用 Cloudflare 加速访问</h1><p>其实到这里，一个简单的博客就搭建完成了。但是 GitHub 的一个最大问题是，国内访问并不稳定。所以接下来我们使用免费的 Cloudflare 代理一层，来加速我们这个博客的访问速度！打开 Cloudflare，在左侧找到 worker 和 pages，点击选择 pages。然后选择连接到 git，选择 GitHub，选择仓库并给它授权就可以了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/cloudflare.png" alt="cloudflare" width="700" /><br>接着点击开始设置，再点击开始部署。部署完成了，点击继续处理项目。在部署这里，上面这个网址，就是 Cloudflare 给我们分配的子域名。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/cloudflare%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90.png" alt="cloudflare部署" width="700" /></p><h2 id="使用自定义域名"><a href="#使用自定义域名" class="headerlink" title="使用自定义域名"></a>使用自定义域名</h2><p>如果有托管到 Cloudflare 的域名，我们还可以用自己的域名，来实现自定义域。关于如何把网上购买的域名，托管到 Cloudflare，可以参考 <a href="/2025/01/12/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A">免费图床</a> 这篇文章，里面有介绍如何把阿里云域名托管到 Cloudflare。<br><br>我们点击自定义域选项,然后点击设置自定义域，把域名填进去，点击继续。然后点击激活按钮，激活成功后就可以使用自定义域名来访问博客网站了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F.png" alt="自定义域名" width="700" /></p><h1 id="修改-Hexo-主题为-Fluid"><a href="#修改-Hexo-主题为-Fluid" class="headerlink" title="修改 Hexo 主题为 Fluid"></a>修改 Hexo 主题为 Fluid</h1><p>但是现在这个博客的主题，看上去不太好看。下面我们来换个好看点的主题，这里我们使用这个 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid主题</a>。hexo有很多开源免费的主题，大家可以自行选择。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/fluid.png" alt="fluid" width="700" /><br>我们来安装这个主题，我们用第2种安装方式：下载最新 release 版本，解压到 themes 目录，并将解压出的文件夹重命名为 fluid 就可以了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E5%AE%89%E8%A3%85fluid.png" alt="安装fluid" width="700" /><br>在 _config.yml 文件中，添加配置 <code>theme: fluid</code> 指定使用 fluid 主题。然后生成about页面，修改index文件，这些都按照fluid的文档操作就可以。我们再重新部署一下，等部署完成刷新下博客的页面，可以看到现在博客主题已经变成 fluid 了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/fluid%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2.png" alt="fluid主题博客" width="700" /></p><h1 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h1><p>但是现在我们这个博客，它是没有评论功能的，拉到博客文章的最底部，可以看到是没有评论区的。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E6%97%A0%E6%B3%95%E8%AF%84%E8%AE%BA.png" alt="无法评论" width="700" /><br>下面我们来给博客添加一个评论功能，这里我们使用这个 <a href="https://github.com/apps/utterances">utterances插件</a>，它是一个基于 GitHub Issue 的，开源评论插件。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6.png" alt="安装评论插件" width="700" /><br>我们点击安装它，然后选择对应的仓库给它授权。然后在 GitHub 仓库，点击设置，找到 features 下面这个 Discussion 选项，然后点击勾选上这个选项。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/discussion.png" alt="开启评论" width="700" /><br>接着我们需要修改 _config.fluid.yml 配置文件，在文件中填入下面的内容，保存就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">post:<br>  comments:<br>    <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>    <span class="hljs-built_in">type</span>: utterances<br><br>utterances:<br>  repo: GitHub用户名/GitHub用户名.github.io<br>  issue_term: title<br>  label: utterances<br>  theme: github-light<br>  theme_dark: github-dark<br>  crossorigin: anonymous    <br><br></code></pre></td></tr></table></figure><p>下面我们重新发布下服务，看下效果。发布完成了，打开博客网站，刷新下可以看到已经有评论功能了。我们用 GitHub 账号登录，然后发一条评论试试，评论发布成功，这样我们的评论功能就添加成功了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E8%AF%84%E8%AE%BA.png" alt="评论测试" width="700" /></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>到这里我们这个博客就基本搭建完成了，其它一些细化功能，比如访问信息统计、网页布局调整等，都可以后续慢慢优化。总体来说这个方案，用来搭建个人博客是非常合适的。用到的资源基本全部免费，而且能够保证国内国外的用户，都能正常访问。大家如果感兴趣，可以自己动手搭建一个。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%95%88%E6%9E%9C.png" alt="博客效果" width="700" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人图床最佳方案：Cloudflare R2+PicGo</title>
    <link href="/2025/01/12/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2025/01/12/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你正在计划搭建一个博客，或者是个人网站，那一个稳定的图床是必不可少的。那么什么是图床呢？<br><br></p><blockquote><p>图床是这样一个东西：</p><blockquote><p>你把博客中需要用到的图片，上传到图床（有OSS存储）。然后图床会给你上传的每张图片，都生成一个网址。这样你就可以在自己的博客中，使用这些网址来加载需要的图片了。 </p></blockquote></blockquote><br>当前图床的实现方案有很多种，有免费的公共图床、使用 GitHub 仓库作为图床、自建图床、直接嵌入 Markdown 文档等多种方式。下面的表格，分析对比了各种方案的优缺点，和它们适用的场景。大家可以根据自己的使用需，要来选择使用。没有最好的方案，只有最合适的方案。    <br></br>比如你只是想发发文章，记录下自己的技术经验。那直接使用微信公众号，这种现成的平台，也是一个不错的选择。<font color="#00A2FF"><i>但是如果你想，搭建一个自己的网站，拥有一片属于自己的小天地。那我强烈建议你，搭建一个属于自己的图床，在这里你将拥有最大的自主权！Let's go!🏂🏂🏂</i></font>  <br></br><table><thead><tr><th><strong>方案</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td><strong>公共图床</strong></td><td>操作简便，支持外链且通常免费</td><td>有流量限制，有跑路风险</td><td>普通用户轻量级的图片发布，例如文章配图</td></tr><tr><td><strong>云存储服务</strong></td><td>服务稳定可靠，CDN 提供较快的访问速度</td><td>可能涉及收费，配置较为复杂</td><td>对存储性能和访问速度，有一定要求</td></tr><tr><td><strong>GitHub 仓库</strong></td><td>存储免费可靠，支持版本控制，适合技术博客</td><td>国内访问速度慢，非开发人员上手有一定难度</td><td>技术博客、公开技术文档或代码仓库</td></tr><tr><td><strong>自建图床</strong></td><td>完全控制图片存储，可以长期保留数据</td><td>需要服务器和技术支持，前期可能比较耗时</td><td>长期内容创作或对稳定性要求较高的用户</td></tr><tr><td><strong>直接嵌入 Markdown</strong></td><td>图片与文档一起存储，无需依赖外部链接</td><td>会导致文件体积增大，加载速度较慢，不适合大量图片存储</td><td>少量图片的 Markdown 文档</td></tr><tr><td><strong>目标平台存储</strong></td><td>使用简便，平台自动处理图片存储</td><td>不支持跨平台，迁移时需要重新上传</td><td>特定平台，公众号、知乎等</td></tr></tbody></table><h1 id="需要提前准备的"><a href="#需要提前准备的" class="headerlink" title="需要提前准备的"></a>需要提前准备的</h1><p>要使用 Cloudflare R2 和 PicGo 搭建一个免费图床，我们需要提前准备的东西包括：</p><ol><li>一个提前注册好的 Cloudflare 账号，并添加一个付费计划<ul><li>不必担心扣费，可以选择0元免费计划</li></ul></li><li>一个提前注册好的域名，可以选便宜一些的<ul><li>域名后缀无所谓，只是作为图片网址使用</li><li>如果不想花一年十几块的域名费，也可以去网上找免费的域名使用</li></ul></li></ol><h1 id="搭建图床"><a href="#搭建图床" class="headerlink" title="搭建图床"></a>搭建图床</h1><p>下面我们就来开始，使用 Cloudflare R2 和 PicGo 搭建一个免费图床。</p><h2 id="1-Cloudflare-R2-配置"><a href="#1-Cloudflare-R2-配置" class="headerlink" title="1. Cloudflare R2 配置"></a>1. Cloudflare R2 配置</h2><p>打开 Cloudflare 网站，在左侧导航栏中，找到 R2 对象存储，点击打开。可以看到这里的介绍：Cloudflare R2 对象存储，给我们提供了10G的免费存储空间，这对个人网站来说，已经足够使用了。而且就算超出这个限额，续费也才大约1角钱&#x2F;G，相比于其它云存储产品，可以说是相当划算的。<br><br>此外，Cloudflare 每个月可以免费写入的次数，为100万次，可以免费读取的次数，为1000万次，这对于个人网站也是完全够用的。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/R2%E4%BB%8B%E7%BB%8D.png" alt="Cloudflare R2" width="700" /><br>点击下面这个 ”将R2订阅添加到我的账户“，然后在这个页面，点击创建存储桶。存储桶的名称，自己定义一个就行。然后位置这里，可以根据自己网站的，主要用户所在的地区，来就近选择。<br><br>比如，我要搭建的博客，主要面向亚洲用户。位置这里，我就可以选择亚太地区。其它配置都不用管，保持默认就可以了。然后点击创建，这样一个存储桶就创建OK了！<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E6%A1%B6.png" alt="存储桶" width="700" /><br>但是现在我们这个 blog 存储桶，还无法通过公共 URL 来访问，需要进行一步的设置。点击 blog 存储桶右侧的设置选项，向下划，找到 R2.dev 子域配置项。点击允许访问，在弹框中，根据提示输入 allow，然后点击允许。等设置生效后，就可以通过公共 URL 来访问 blog 存储桶了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%AD%98%E5%82%A8%E6%A1%B6%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%88%90.png" alt="上传文件" width="700" /><br>返回到存储桶的对象页面，从本地拖一张进来，上传上去。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87.png" alt="上传成功" width="700" /><br>上传成功后，点击打开图片。就会看到 R2 给我们生成的图片网址，使用这个网址，就可以访问对应的图片了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%9B%BE%E7%89%87%E7%BD%91%E5%9D%80.png" alt="图片网址" width="700" /><br>最后把图片的网址，放到浏览器打开试一下，看一下能否正常加载出来。<em><strong>注意使用 Cloudflare R2 搭建的图床，国内&#x2F;国外网络都能访问！</strong></em><br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E6%89%93%E5%BC%80%E5%9B%BE%E7%89%87.png" alt="浏览器打开图片" width="700" /></p><h2 id="2-域名托管到-Cloudflare"><a href="#2-域名托管到-Cloudflare" class="headerlink" title="2. 域名托管到 Cloudflare"></a>2. 域名托管到 Cloudflare</h2><p>接下来我们要使用自己的域名，替换掉 Cloudflare R2 给我们分配的域名，实现自定义域名。要实现自定义域名，我们需要先把自己的域名，托管到 Cloudflare 才行。在 Cloudflare 的左侧导航栏，点击网站选项。然后在现有域这里，填上我们自己的域名。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%A1%AB%E5%86%99%E5%9F%9F%E5%90%8D.png" alt="添加域名" width="700" /><br>点击继续，付费计划选择最下面的免费计划，接着点击继续，然后选择继续前往激活，弹框这里直接选择确认。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%85%8D%E8%B4%B9%E8%AE%A1%E5%88%92.png" alt="选择免费计划" width="700" /><br>然后向下划，找到3.更新名称服务器。这里生成了2个名称服务器网址，把这2个网址复制下来，等下会用到。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/2%E4%B8%AA%E7%BD%91%E5%9D%80.png" alt="生成的网址" width="700" /><br>我的域名是在阿里云购买的，这里就用阿里云做演示，其他云平台的操作也都差不多。打开阿里云的控制台，然后在左侧导航栏找到域名选项，再继续选择域名列表。在右侧点击管理，接着点击 DNS 修改，选择修改 DNS 服务器。然后把 Cloudflare 上那2个名称服务器网址配置就去就可以了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E9%85%8D%E7%BD%AE%E7%BD%91%E5%9D%80.png" alt="配置2个网址" width="700" /><br>配置完成以后，回到 Cloudflare，现在域名的托管状态，还在等待处理中。等一段时间，域名状态变成活动以后，域名就成功从阿里云托管到 Cloudflare 了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E6%89%98%E7%AE%A1%E6%88%90%E5%8A%9F.png" alt="域名托管成功" width="700" /></p><h2 id="3-Cloudflare-R2-自定义域名"><a href="#3-Cloudflare-R2-自定义域名" class="headerlink" title="3. Cloudflare R2 自定义域名"></a>3. Cloudflare R2 自定义域名</h2><p>现在域名已经托管到 Cloudflare 了，接下来我们用这个域名，替换 Cloudflare R2 分配的域名。打开我们创建的 blog 存储桶，点击右侧的设置选项。向下划，找到自定义域，点击连接域，然后输入我们的域名就可以了。等一段时间刷新页面，就可以看到自定义域名已经生效了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F.png" alt="实现自定义域" width="700" /><br>然后我们再打开 blog 存储桶中的图片，可以看到除了原来的那个网址，还给我们生成了一个自定义域名的网址，这2个网址都可以用来访问图片。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E6%96%B0%E7%BD%91%E5%9D%80.png" alt="新的图片网址" width="700" /></p><h2 id="4-PicGo-安装配置"><a href="#4-PicGo-安装配置" class="headerlink" title="4. PicGo 安装配置"></a>4. PicGo 安装配置</h2><p>到这里一个可用的图床，就已经基本搭建完成了。但是 Cloudflare 自带的图片上传功能比较简陋，这里给大家推荐一个开源工具 PicGo。 <a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">点击下载</a></p><blockquote><p>PicGo 是一个用来上传图片，并获得图片网址的开源工具</p></blockquote><p>安装完成后，打开 PicGo，首先需要安装一个 S3 插件。点击插件设置，搜索 S3，选择安装这个 s3-lls 插件。如果安装失败，可以重启 PicGo 再重新尝试安装。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/S3.png" alt="安装S3插件" width="500" /><br>安装完插件，打开左侧的图床设置，找到 Amazon S3 然后编辑默认设置。下面来分别介绍这些配置项：<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/picgo%20-%20%E9%85%8D%E7%BD%AE.png" alt="S3参数配置" width="500" /></p><blockquote><p>设置名称，自定义一个就可以。</p></blockquote><blockquote><p>应用秘钥ID和应用秘钥，需要从cloudflare网站获取。在 Cloudflare 网站，点击左侧导航栏中的R2对象存储，选择概述选项。然后点击API按钮，选择管理API令牌，再点击创建API令牌。自定义一个令牌名，权限这里，选择读对象和写，最后点击创建API令牌。创建完成后，在 S3 客户端配置项下面，就给我们生成了 ID 和秘钥，把它们分别填入 PicGo 中就行了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/ID%E7%A7%98%E9%92%A5.png" alt="生成ID和秘钥" width="700" /></p></blockquote><blockquote><p>桶这里填入我们创建的，存储桶的名字 blog.</p></blockquote><blockquote><p>文件路径这里，填入 PicGo 加全文件名。这样通过 PicGo 上传的图片，都会统一放到 blog 存储桶下面，一个叫 PicGo 的文件夹中。</p></blockquote><blockquote><p>权限保持默认</p></blockquote><blockquote><p>地区填入auto，或者我们在创建存储桶时，选择的地区。</p></blockquote><blockquote><p>自定义节点，需要从 Cloudflare 网站获取。在 Cloudflare 网站，点击左侧导航栏中的R2对象存储，选择概述选项。点击API按钮，选择第一项通过 API 来使用 R2 存储。点击复制下面的 https 网址，粘贴到 PicGo 中就可以了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/API%E7%BD%91%E5%9D%80.png" alt="获取子域网址" width="700" /></p></blockquote><blockquote><p>自定义域名，填写我们托管到 Cloudflare 的域名。</p></blockquote><h1 id="图床效果"><a href="#图床效果" class="headerlink" title="图床效果"></a>图床效果</h1><p>配置完成后就可以用 PicGo 上传图片了，点击左侧的上传区，把图片拖进来就行。然后点击左侧的相册，可以查看已上传的图片。在每张图片的左下角，都有一个复制按钮，点击它，就可以复制到这张图片的网址。<br><br>你会发现，它还帮我们，自动转成了 Markdown 格式，这给使用 Markdown 来写文章的用户，提供了很大的方便。如果我们不需要 Markdown 格式的网址，可以点击上面这个下拉按钮，在这里可以选择，普通的 URL 或者其它格式。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E7%BD%91%E5%9D%80%E7%9A%84%E6%A0%BC%E5%BC%8F.png" alt="选择网址格式" width="500" /><br>最后我们把图片网址，放到 Markdown 文档中看一下，可以看到，使用完全没有问题，而且图片的加载速度也很流畅！<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%8D%9A%E5%AE%A2.png" alt="使用效果" width="700" /></p><h1 id="方案优势"><a href="#方案优势" class="headerlink" title="方案优势"></a>方案优势</h1><p>图床搭建完成后，就可以直接在博客，或个人网站中使用了。那这个方案它具有以下优点：</p><ol><li>免费，Cloudflare R2 存储，为我们提供了足够使用的免费额度</li><li>服务稳定，不需要担心服务商跑路的问题</li><li>不存在网络环境限制，生成的图片链接，国内网络和国外网络都可以打开</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024最新款手机对比评测</title>
    <link href="/2024/12/25/2024%E6%9C%80%E6%96%B0%E6%AC%BE%E6%89%8B%E6%9C%BA%E6%B5%8B%E8%AF%84/"/>
    <url>/2024/12/25/2024%E6%9C%80%E6%96%B0%E6%AC%BE%E6%89%8B%E6%9C%BA%E6%B5%8B%E8%AF%84/</url>
    
    <content type="html"><![CDATA[<h1 id="2024最新款手机对比评测"><a href="#2024最新款手机对比评测" class="headerlink" title="2024最新款手机对比评测"></a>2024最新款手机对比评测</h1><p>在对比分析的过程中，我们不仅将列出各项性能指标的数据，还将结合用户的使用场景和需求，给出具体的评价和建议。比如，对于喜欢玩游戏的用户，我们会推荐处理器性能强大、散热 …</p><h2 id="苹果手机"><a href="#苹果手机" class="headerlink" title="苹果手机"></a>苹果手机</h2><p><img src="https://tyxiaoming.top/%E6%89%8B%E6%9C%BA%E4%BB%8B%E7%BB%8D/iphone-16.jpeg"></p><h2 id="华为手机"><a href="#华为手机" class="headerlink" title="华为手机"></a>华为手机</h2><p><img src="https://tyxiaoming.top/%E6%89%8B%E6%9C%BA%E4%BB%8B%E7%BB%8D/HuaWei-mate70.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/25/hello-world/"/>
    <url>/2024/12/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
