<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>免费PDF翻译神器：保留排版样式，科研党必备！3分钟完成本地部署，无限使用次数</title>
    <link href="/2025/01/22/%E5%85%8D%E8%B4%B9PDF%E7%BF%BB%E8%AF%91%E7%A5%9E%E5%99%A8%EF%BC%9A%E4%BF%9D%E7%95%99%E6%8E%92%E7%89%88%E6%A0%B7%E5%BC%8F%EF%BC%8C%E7%A7%91%E7%A0%94%E5%85%9A%E5%BF%85%E5%A4%87/"/>
    <url>/2025/01/22/%E5%85%8D%E8%B4%B9PDF%E7%BF%BB%E8%AF%91%E7%A5%9E%E5%99%A8%EF%BC%9A%E4%BF%9D%E7%95%99%E6%8E%92%E7%89%88%E6%A0%B7%E5%BC%8F%EF%BC%8C%E7%A7%91%E7%A0%94%E5%85%9A%E5%BF%85%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一篇8页的，英文 PDF 文档。把它放到这个本地部署的，翻译工具里面。只需要6秒，它就会把这篇英文的 PDF，翻译成中文！<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1.png" alt="PDF翻译服务" width="650" /><br>更厉害的是，翻译后的中文 PDF，依然保留了原来的排版样式，这样就很方便和英文 PDF 对比阅读，简直就是科研党的必备神器！而且只需要几分钟，你就可以把这套翻译工具，部署到自己电脑上，操作十分简单、使用完全免费，并且没有翻译次数的限制。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E6%95%88%E6%9E%9C.png" alt="翻译效果" width="650" /></p><h1 id="部署PDF翻译服务"><a href="#部署PDF翻译服务" class="headerlink" title="部署PDF翻译服务"></a>部署PDF翻译服务</h1><p>我们上面看到的翻译工具，就是这个<a href="https://github.com/Byaidu/PDFMathTranslate"> PDFMathTranslate </a>。它是 GitHub 上的一个开源项目，下面我们就来把这套翻译工具，部署到我们自己的电脑上。我们在 readme 切换到，这个项目的中文说明文档。在这里给我们提供了一个，可以免费试用的网址。但是这个网址的服务，已经无法正常使用了，我们还是来自己部署服务。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE.png" alt="试用服务" width="650" /><br>这个 <a href="https://github.com/Byaidu/PDFMathTranslate"> PDFMathTranslate </a>是由 Python 语言实现的，所以要使用它需要预先安装 Python 环境。而且 Python 的版本，要大于 3.8 小于 3.12。如果对 Python 不熟悉也不要紧，现在主流操作系统都内置了 Python。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/Python%E7%89%88%E6%9C%AC.png" alt="Python版本" width="650" /><br>向下拉，可以看到<a href="https://github.com/Byaidu/PDFMathTranslate"> PDFMathTranslate </a>给我们提供了4种使用方式。包括命令行、便携式安装、图形界面和 docker 运行。这里我们选择图形界面的方式，来部署服务。这种部署方式，对操作系统没有限制。<br><br>不论是 Windows、macOS 还是 Linux 都可以按照，文档中的操作步骤来进行部署。可以看到，部署服务的操作很简单，只需要执行2条命令就可以了。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2.png" alt="GUI界面安装" width="650" /><br>打开命令行窗口，执行 <code>pip install pdf2zh</code> 命令，使用pip安装pdf2zh包。安装完成后，然后执行 <code>pdf2zh -i</code>，启动翻译服务。服务启动后，浏览器会自动打开一个网页，这里就是翻译工具的GUI界面了。如果浏览器没有自动打开这个网页，可以手动，在浏览器打开本地网址<font color="#00A2FF"><i><b> <a href="http://localhost:7860/">http://localhost:7860/</a> </b></i></font><br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1.png" alt="PDF翻译服务" width="650" /></p><h1 id="使用PDF翻译服务"><a href="#使用PDF翻译服务" class="headerlink" title="使用PDF翻译服务"></a>使用PDF翻译服务</h1><p>下面我们来认识下，翻译工具的 GUI，左上方是文件上传区。可以选择上传PDF文档，或者是使用PDF文档的在线网址。我们拖一个英文PDF进来，可以看到，在右侧的预览区，显示了文档的内容。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E9%A2%84%E8%A7%88%E6%96%87%E6%A1%A3.png" alt="上传区域" width="650" /><br>翻译服务这里，主要分为2类：</p><ul><li>一类是常用的翻译服务，比如Google翻译、微软翻译等</li><li>另一类是AI翻译服务，比如Deepl、OpenAI等</li></ul><p>如下图所示：<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E6%9C%8D%E5%8A%A1%E6%96%B9%E5%BC%8F.png" alt="上传区域" width="650" /><br>使用AI翻译服务，只需要在这里，填上自己的 API key就可以了。经过比较，在翻译专业的学术论文方面，AI翻译比 Google、Bing 这种直译效果效果更好一些。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/AI%E7%BF%BB%E8%AF%91.png" alt="翻译服务方式" width="650" /><br>这里我们选择 Google 翻译来演示，翻译语言也支持很多种，包括中文、英文、日文等等。我们这里选择从英文 PDF，翻译成中文 PDF。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E8%AF%AD%E8%A8%80.png" alt="翻译语言" width="650" /><br>再下面，它甚至还给我们提供了一个，翻译页数的选项。你可以选择翻译整个文档、翻译第一页或者是翻译前5页，我们选择翻译整个文档。我们用来翻译的这个 PDF，是一篇 AI 相关的 paper。里面有一些图表和公式，然后我们点击翻译，右侧可以看到翻译进度。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E7%BF%BB%E8%AF%91%E8%BF%9B%E5%BA%A6.png" alt="翻译进度" width="650" /><br>翻译结束了，这篇8页的 PDF 用时大概6秒，可以说速度已经很让人满意了。这是翻译后的中文，在左侧还给我们提供了2个，翻译结果的下载链接，一个 mono，一个 dual。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6.png" alt="下载文件" width="650" /><br>我们把它下载下来，然后打开看一下。这个 mono 的 PDF，是翻译后的中文 PDF，可以看到，完全保留了原 PDF 的排版样式。而且文章内容的翻译效果也不错，这能够帮我们，节省大量的阅读时间。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/mono.png" alt="mono" width="650" /><br>我们再打开这个 dual 的 PDF，可以看到这个文档，是英文和中文交替的。如果想在一个文档中，进行对比阅读，就可以使用这个文档。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/dual.png" alt="dual" width="650" /></p><p>除了上面介绍的，这种本地上传 PDF 的方式，还可以使用 PDF 的在线网址。这里有一个<a href="https://arxiv.org/pdf/1706.03762">在线的PDF文档</a>，我们复制它的网址。然后在翻译工具这里，选择 link，把网址粘贴进去，点击翻译。这个15页的英文 PDF，用时大概15秒。可以看到，翻译后的效果也很不错。<br><img src="https://tyxiaoming.top/PDF%E7%BF%BB%E8%AF%91/%E5%9C%A8%E7%BA%BF%E7%BF%BB%E8%AF%91.png" alt="在线翻译" width="650" /></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>上面这些，就是这个翻译工具的，本地部署和使用介绍。如果你有阅读外文 PDF 的需求，可以花几分钟，在自己电脑上部署一套，它能够帮助你节省大量的阅读时间。如果使用后，觉得这个工具还不错，还可以在 GitHub 上，给项目点一个免费的 star ✨✨✨</p>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建免费个人博博客：Cloudflare+GitHub+Hexo Fluid</title>
    <link href="/2025/01/21/%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/01/21/%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一篇文章，我们已经使用 Cloudflare R2 和 PicGo 搭建了一个<a href="/2025/01/12/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A">免费图床</a>。今天我们来继续完成，博客网站的搭建。作为一个个人博客，我们希望这个网站能够具有以下优点：</p><ol><li>最好是免费的，不需要额外购买云服务器</li><li>维护尽量简单，我们只用它发布文章，不需要太复杂的功能</li><li>网络访问流畅，不论是国内用户还是国外用户，都能访问我们的博客</li></ol><p><font color="#00A2FF"><i><b> 在综合考虑了上面3点要求后，我们最终选择了使用 Cloudflare+GitHub+Hexo Fluid 来搭建博客网站。</b></i></font></p><h1 id="Hexo环境配置"><a href="#Hexo环境配置" class="headerlink" title="Hexo环境配置"></a>Hexo环境配置</h1><p>hexo 是一个快速、简洁，而且功能强大的静态博客框架。我们可以使用 Markdown 编写博客文章，然后 hexo 帮我们把 Markdown 文件渲染成静态 HTML 页面。因此 hexo 非常适合用来搭建技术类博客，以及项目文档和个人网站。</p><h2 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1. 安装 Node.js"></a>1. 安装 Node.js</h2><p>由于 hexo 是基于 Node.js 的，因此要安装 hexo，需要先安装 Node.js 和 npm，然后通过 npm 来安装 hexo。要安装 Node.js ，可以打开<a href="https://nodejs.org/zh-cn">Node.js官网</a>，下载软件然后进行安装就可以了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/nodejs%E5%AE%98%E7%BD%91.png" alt="安装Node.js" width="700" /><br>安装这个软件，会同时安装 node 和 npm 这2个工具。安装完成以后，我们来验证一下是否安装成功了。执行下面的命令，如果能输出版本号，就代表 node 安装成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br></code></pre></td></tr></table></figure><p>接着再执行这条命令，同样如果能输出版本号就证明 npm 也安装成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm -v<br></code></pre></td></tr></table></figure><h2 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2. 安装 Hexo"></a>2. 安装 Hexo</h2><p>下面我们来安装 hexo，需要注意我们这里安装的是 <code>hexo客户端</code> 。安装 hexo 需要使用 npm 命令，但是在国内使用 npm 安装软件，速度很慢。因此我们先执行下面这条命令，给 npm 替换成国内的源，这样安装速度就会快很多了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com <br></code></pre></td></tr></table></figure><p>接着执行下面这条命令，使用 npm 安装 hexo客户端。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装好 hexo 以后，执行 <code>hexo init my-blog</code> 初始化 my-blog 文件夹（自定义）。这个文件夹，就是我们的博客项目，用来存放我们的全部博客文章。然后 <code>cd my-blog</code> 进入到文件夹，接着执行 <code>npm install</code> 命令安装依赖包。<br><br>到这里我们的 hexo 环境配置就基本完成了，下面就可以使用它来写文章和发布文章了！👍👍👍<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AEhexo.png" alt="配置hexo" width="700" /></p><h1 id="使用-Hexo-管理博客"><a href="#使用-Hexo-管理博客" class="headerlink" title="使用 Hexo 管理博客"></a>使用 Hexo 管理博客</h1><p>为了方便编辑，我们使用 vscode 打开 my-blog 文件夹。下面来看一下 my-blog 里面的主要组成部分：</p><ol><li>_config.yml：博客的全局配置文件，网站的名称、描述、作者等，都可以在这里进行设置</li><li>source&#x2F;_post：存放我们全部的文章，而且 hexo 自带了一篇 demo 文章 hello-world</li><li>themes：博客的主题配置文件，hexo 有一个默认主题，但不太好看，后面可以改成漂亮一些的主题</li></ol><p>上面这3部分，就是我们使用 hexo 写博客时需要重点关注的地方。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/hexo%E7%BB%93%E6%9E%84.png" alt="hexo组成" width="700" /><br>接着我们执行 <code>hexo generate</code> 和 <code>hexo server</code> 这2条命令，在本地把 hexo 服务跑起来。这样我们就可以，在本地网址的4000端口，预览文章效果。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E5%90%AF%E5%8A%A8hexo.png" alt="运行hexo" width="700" /><br>打开<font color="#00A2FF"><i><b> <a href="http://localhost:4000/">http://localhost:4000/</a> </b></i></font>这个本地网址，已经可以正常访问了，这里就是博客网页的布局。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/hello-world.png" alt="博客预览" width="700" /></p><h1 id="将博客托管到-GitHub-Pages"><a href="#将博客托管到-GitHub-Pages" class="headerlink" title="将博客托管到 GitHub Pages"></a>将博客托管到 GitHub Pages</h1><p>现在我们这个博客，还只能在本地网址预览。下面我们把博客项目托管到 GitHub 仓库，并且使用 GitHub Pages 来部署博客，让其他人也能访问我们的博客网站。</p><h2 id="1-博客项目托管到GitHub"><a href="#1-博客项目托管到GitHub" class="headerlink" title="1. 博客项目托管到GitHub"></a>1. 博客项目托管到GitHub</h2><p>为了方便管理 my-blog 博客项目，我们下一步把这个项目托管到 GitHub 上。首先在 GitHub 上创建一个项目，项目名可以设置为 <code>我们的GitHub用户名.github.io</code>。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E5%88%9B%E5%BB%BAGitHub%E9%A1%B9%E7%9B%AE.png" alt="创建GitHub项目" width="700" /><br>创建完成后，GitHub 给我们列出了一些，快速设置这个仓库的操作指令。我们选择第一种，依次执行它给我们提供的这些命令。需要注意，<code>git add README.md</code> 这条命令我们要替换成 <code>git add .</code> 来把 my-blog 文件夹下的全部文件，都暂存到仓库。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E5%88%9D%E5%A7%8B%E5%8C%96GitHub%E4%BB%93%E5%BA%93.png" alt="创建GitHub项目" width="700" /></p><h2 id="2-使用-GitHub-Pages-部署博客"><a href="#2-使用-GitHub-Pages-部署博客" class="headerlink" title="2. 使用 GitHub Pages 部署博客"></a>2. 使用 GitHub Pages 部署博客</h2><p>执行完配置命令以后，我们就可以使用 git 来管理博客项目了。接下来我们把 my-blog 项目，部署到 GitHub Pages 上。 这样我们的博客，就不再只是一个本地网站了。其他人也可以通过网络，来访问我们的博客。<br><br>首先在 my-blog 项目的 _config.yml 配置文件中，把 git 服务部署的配置加进去。在 type 配置项这里填上 git，然后分别添加一个 repository 和一个 branch 配置，指定部署博客网站时，所使用的 GitHub 项目和对应的分支。repository 这里填 <code>git@github.com:GitHub用户名/GitHub仓库名</code>，branch 这里指定 <code>main</code> 分支，然后保存配置。<br><br>最后我们执行 <code>npm install hexo-deployer-git --save</code> 命令，安装 hexo-deployer-git 这个插件，来简化部署到 GitHub Pages 的流程。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/GitHub%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE.png" alt="GitHub部署配置" width="700" /><br>这样配置完以后，我们就可以在本地写文章，写完以后通过 <font color="#00A2FF"><i><b><a href="http://localhost:4000/">http://localhost:4000/</a></b></i></font> 预览文章效果并进行修改。修改满意后，就可以部署到 GitHub Pages 这样其他人就能访问我们的博客了。我们来看一下使用流程：<br><br>首先我们使用 <code>hexo new post 文章标题</code>，来创建一篇新文章。这样操作后，hexo 就会在 source&#x2F;_post 下面，给我们生成一个新文件来编辑这篇文章。我们使用上一篇文章，搭建的 <a href="/2025/01/12/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A">免费图床</a> 来简单编辑一下这篇新文章。MarkDown 本地渲染一下，显示正常。然后执行这个三合一命令，把文章发布到 GitHub Pages。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><ul><li>hexo clean：清除缓存，简写 hexo -c</li><li>hexo generate：生成渲染，简写 hexo -g</li><li>hexo deploy：部署到 GitHub Pages，简写 hexo -d</li><li>hexo server：启动本地预览，简写 hexo -s</li></ul><p>发布完成后，打开 <code>https://github用户名.github.io/</code> 这个网址，就可以访问我们的在线博客了！👌<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/GitHubPages.png" alt="GitHubPages" width="700" /></p><h1 id="使用-Cloudflare-加速访问"><a href="#使用-Cloudflare-加速访问" class="headerlink" title="使用 Cloudflare 加速访问"></a>使用 Cloudflare 加速访问</h1><p>其实到这里，一个简单的博客就搭建完成了。但是 GitHub 的一个最大问题是，国内访问并不稳定。所以接下来我们使用免费的 Cloudflare 代理一层，来加速我们这个博客的访问速度！打开 Cloudflare，在左侧找到 worker 和 pages，点击选择 pages。然后选择连接到 git，选择 GitHub，选择仓库并给它授权就可以了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/cloudflare.png" alt="cloudflare" width="700" /><br>接着点击开始设置，再点击开始部署。部署完成了，点击继续处理项目。在部署这里，上面这个网址，就是 Cloudflare 给我们分配的子域名。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/cloudflare%E9%83%A8%E7%BD%B2%E5%AE%8C%E6%88%90.png" alt="cloudflare部署" width="700" /></p><h2 id="使用自定义域名"><a href="#使用自定义域名" class="headerlink" title="使用自定义域名"></a>使用自定义域名</h2><p>如果有托管到 Cloudflare 的域名，我们还可以用自己的域名，来实现自定义域。关于如何把网上购买的域名，托管到 Cloudflare，可以参考 <a href="/2025/01/12/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A">免费图床</a> 这篇文章，里面有介绍如何把阿里云域名托管到 Cloudflare。<br><br>我们点击自定义域选项,然后点击设置自定义域，把域名填进去，点击继续。然后点击激活按钮，激活成功后就可以使用自定义域名来访问博客网站了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F.png" alt="自定义域名" width="700" /></p><h1 id="修改-Hexo-主题为-Fluid"><a href="#修改-Hexo-主题为-Fluid" class="headerlink" title="修改 Hexo 主题为 Fluid"></a>修改 Hexo 主题为 Fluid</h1><p>但是现在这个博客的主题，看上去不太好看。下面我们来换个好看点的主题，这里我们使用这个 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid主题</a>。hexo有很多开源免费的主题，大家可以自行选择。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/fluid.png" alt="fluid" width="700" /><br>我们来安装这个主题，我们用第2种安装方式：下载最新 release 版本，解压到 themes 目录，并将解压出的文件夹重命名为 fluid 就可以了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E5%AE%89%E8%A3%85fluid.png" alt="安装fluid" width="700" /><br>在 _config.yml 文件中，添加配置 <code>theme: fluid</code> 指定使用 fluid 主题。然后生成about页面，修改index文件，这些都按照fluid的文档操作就可以。我们再重新部署一下，等部署完成刷新下博客的页面，可以看到现在博客主题已经变成 fluid 了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/fluid%E4%B8%BB%E9%A2%98%E5%8D%9A%E5%AE%A2.png" alt="fluid主题博客" width="700" /></p><h1 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h1><p>但是现在我们这个博客，它是没有评论功能的，拉到博客文章的最底部，可以看到是没有评论区的。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E6%97%A0%E6%B3%95%E8%AF%84%E8%AE%BA.png" alt="无法评论" width="700" /><br>下面我们来给博客添加一个评论功能，这里我们使用这个 <a href="https://github.com/apps/utterances">utterances插件</a>，它是一个基于 GitHub Issue 的，开源评论插件。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6.png" alt="安装评论插件" width="700" /><br>我们点击安装它，然后选择对应的仓库给它授权。然后在 GitHub 仓库，点击设置，找到 features 下面这个 Discussion 选项，然后点击勾选上这个选项。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/discussion.png" alt="开启评论" width="700" /><br>接着我们需要修改 _config.fluid.yml 配置文件，在文件中填入下面的内容，保存就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">post:<br>  comments:<br>    <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>    <span class="hljs-built_in">type</span>: utterances<br><br>utterances:<br>  repo: GitHub用户名/GitHub用户名.github.io<br>  issue_term: title<br>  label: utterances<br>  theme: github-light<br>  theme_dark: github-dark<br>  crossorigin: anonymous    <br><br></code></pre></td></tr></table></figure><p>下面我们重新发布下服务，看下效果。发布完成了，打开博客网站，刷新下可以看到已经有评论功能了。我们用 GitHub 账号登录，然后发一条评论试试，评论发布成功，这样我们的评论功能就添加成功了。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E8%AF%84%E8%AE%BA.png" alt="评论测试" width="700" /></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>到这里我们这个博客就基本搭建完成了，其它一些细化功能，比如访问信息统计、网页布局调整等，都可以后续慢慢优化。总体来说这个方案，用来搭建个人博客是非常合适的。用到的资源基本全部免费，而且能够保证国内国外的用户，都能正常访问。大家如果感兴趣，可以自己动手搭建一个。<br><img src="https://tyxiaoming.top/%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E6%95%88%E6%9E%9C.png" alt="博客效果" width="700" /></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人图床最佳方案：Cloudflare R2+PicGo</title>
    <link href="/2025/01/12/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2025/01/12/%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你正在计划搭建一个博客，或者是个人网站，那一个稳定的图床是必不可少的。那么什么是图床呢？<br><br></p><blockquote><p>图床是这样一个东西：</p><blockquote><p>你把博客中需要用到的图片，上传到图床（有OSS存储）。然后图床会给你上传的每张图片，都生成一个网址。这样你就可以在自己的博客中，使用这些网址来加载需要的图片了。 </p></blockquote></blockquote><br>当前图床的实现方案有很多种，有免费的公共图床、使用 GitHub 仓库作为图床、自建图床、直接嵌入 Markdown 文档等多种方式。下面的表格，分析对比了各种方案的优缺点，和它们适用的场景。大家可以根据自己的使用需，要来选择使用。没有最好的方案，只有最合适的方案。    <br></br>比如你只是想发发文章，记录下自己的技术经验。那直接使用微信公众号，这种现成的平台，也是一个不错的选择。<font color="#00A2FF"><i>但是如果你想，搭建一个自己的网站，拥有一片属于自己的小天地。那我强烈建议你，搭建一个属于自己的图床，在这里你将拥有最大的自主权！Let's go!🏂🏂🏂</i></font>  <br></br><table><thead><tr><th><strong>方案</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>适用场景</strong></th></tr></thead><tbody><tr><td><strong>公共图床</strong></td><td>操作简便，支持外链且通常免费</td><td>有流量限制，有跑路风险</td><td>普通用户轻量级的图片发布，例如文章配图</td></tr><tr><td><strong>云存储服务</strong></td><td>服务稳定可靠，CDN 提供较快的访问速度</td><td>可能涉及收费，配置较为复杂</td><td>对存储性能和访问速度，有一定要求</td></tr><tr><td><strong>GitHub 仓库</strong></td><td>存储免费可靠，支持版本控制，适合技术博客</td><td>国内访问速度慢，非开发人员上手有一定难度</td><td>技术博客、公开技术文档或代码仓库</td></tr><tr><td><strong>自建图床</strong></td><td>完全控制图片存储，可以长期保留数据</td><td>需要服务器和技术支持，前期可能比较耗时</td><td>长期内容创作或对稳定性要求较高的用户</td></tr><tr><td><strong>直接嵌入 Markdown</strong></td><td>图片与文档一起存储，无需依赖外部链接</td><td>会导致文件体积增大，加载速度较慢，不适合大量图片存储</td><td>少量图片的 Markdown 文档</td></tr><tr><td><strong>目标平台存储</strong></td><td>使用简便，平台自动处理图片存储</td><td>不支持跨平台，迁移时需要重新上传</td><td>特定平台，公众号、知乎等</td></tr></tbody></table><h1 id="需要提前准备的"><a href="#需要提前准备的" class="headerlink" title="需要提前准备的"></a>需要提前准备的</h1><p>要使用 Cloudflare R2 和 PicGo 搭建一个免费图床，我们需要提前准备的东西包括：</p><ol><li>一个提前注册好的 Cloudflare 账号，并添加一个付费计划<ul><li>不必担心扣费，可以选择0元免费计划</li></ul></li><li>一个提前注册好的域名，可以选便宜一些的<ul><li>域名后缀无所谓，只是作为图片网址使用</li><li>如果不想花一年十几块的域名费，也可以去网上找免费的域名使用</li></ul></li></ol><h1 id="搭建图床"><a href="#搭建图床" class="headerlink" title="搭建图床"></a>搭建图床</h1><p>下面我们就来开始，使用 Cloudflare R2 和 PicGo 搭建一个免费图床。</p><h2 id="1-Cloudflare-R2-配置"><a href="#1-Cloudflare-R2-配置" class="headerlink" title="1. Cloudflare R2 配置"></a>1. Cloudflare R2 配置</h2><p>打开 Cloudflare 网站，在左侧导航栏中，找到 R2 对象存储，点击打开。可以看到这里的介绍：Cloudflare R2 对象存储，给我们提供了10G的免费存储空间，这对个人网站来说，已经足够使用了。而且就算超出这个限额，续费也才大约1角钱&#x2F;G，相比于其它云存储产品，可以说是相当划算的。<br><br>此外，Cloudflare 每个月可以免费写入的次数，为100万次，可以免费读取的次数，为1000万次，这对于个人网站也是完全够用的。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/R2%E4%BB%8B%E7%BB%8D.png" alt="Cloudflare R2" width="700" /><br>点击下面这个 ”将R2订阅添加到我的账户“，然后在这个页面，点击创建存储桶。存储桶的名称，自己定义一个就行。然后位置这里，可以根据自己网站的，主要用户所在的地区，来就近选择。<br><br>比如，我要搭建的博客，主要面向亚洲用户。位置这里，我就可以选择亚太地区。其它配置都不用管，保持默认就可以了。然后点击创建，这样一个存储桶就创建OK了！<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E6%A1%B6.png" alt="存储桶" width="700" /><br>但是现在我们这个 blog 存储桶，还无法通过公共 URL 来访问，需要进行一步的设置。点击 blog 存储桶右侧的设置选项，向下划，找到 R2.dev 子域配置项。点击允许访问，在弹框中，根据提示输入 allow，然后点击允许。等设置生效后，就可以通过公共 URL 来访问 blog 存储桶了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%AD%98%E5%82%A8%E6%A1%B6%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%88%90.png" alt="上传文件" width="700" /><br>返回到存储桶的对象页面，从本地拖一张进来，上传上去。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87.png" alt="上传成功" width="700" /><br>上传成功后，点击打开图片。就会看到 R2 给我们生成的图片网址，使用这个网址，就可以访问对应的图片了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%9B%BE%E7%89%87%E7%BD%91%E5%9D%80.png" alt="图片网址" width="700" /><br>最后把图片的网址，放到浏览器打开试一下，看一下能否正常加载出来。<em><strong>注意使用 Cloudflare R2 搭建的图床，国内&#x2F;国外网络都能访问！</strong></em><br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E6%89%93%E5%BC%80%E5%9B%BE%E7%89%87.png" alt="浏览器打开图片" width="700" /></p><h2 id="2-域名托管到-Cloudflare"><a href="#2-域名托管到-Cloudflare" class="headerlink" title="2. 域名托管到 Cloudflare"></a>2. 域名托管到 Cloudflare</h2><p>接下来我们要使用自己的域名，替换掉 Cloudflare R2 给我们分配的域名，实现自定义域名。要实现自定义域名，我们需要先把自己的域名，托管到 Cloudflare 才行。在 Cloudflare 的左侧导航栏，点击网站选项。然后在现有域这里，填上我们自己的域名。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%A1%AB%E5%86%99%E5%9F%9F%E5%90%8D.png" alt="添加域名" width="700" /><br>点击继续，付费计划选择最下面的免费计划，接着点击继续，然后选择继续前往激活，弹框这里直接选择确认。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%85%8D%E8%B4%B9%E8%AE%A1%E5%88%92.png" alt="选择免费计划" width="700" /><br>然后向下划，找到3.更新名称服务器。这里生成了2个名称服务器网址，把这2个网址复制下来，等下会用到。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/2%E4%B8%AA%E7%BD%91%E5%9D%80.png" alt="生成的网址" width="700" /><br>我的域名是在阿里云购买的，这里就用阿里云做演示，其他云平台的操作也都差不多。打开阿里云的控制台，然后在左侧导航栏找到域名选项，再继续选择域名列表。在右侧点击管理，接着点击 DNS 修改，选择修改 DNS 服务器。然后把 Cloudflare 上那2个名称服务器网址配置就去就可以了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E9%85%8D%E7%BD%AE%E7%BD%91%E5%9D%80.png" alt="配置2个网址" width="700" /><br>配置完成以后，回到 Cloudflare，现在域名的托管状态，还在等待处理中。等一段时间，域名状态变成活动以后，域名就成功从阿里云托管到 Cloudflare 了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E6%89%98%E7%AE%A1%E6%88%90%E5%8A%9F.png" alt="域名托管成功" width="700" /></p><h2 id="3-Cloudflare-R2-自定义域名"><a href="#3-Cloudflare-R2-自定义域名" class="headerlink" title="3. Cloudflare R2 自定义域名"></a>3. Cloudflare R2 自定义域名</h2><p>现在域名已经托管到 Cloudflare 了，接下来我们用这个域名，替换 Cloudflare R2 分配的域名。打开我们创建的 blog 存储桶，点击右侧的设置选项。向下划，找到自定义域，点击连接域，然后输入我们的域名就可以了。等一段时间刷新页面，就可以看到自定义域名已经生效了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F.png" alt="实现自定义域" width="700" /><br>然后我们再打开 blog 存储桶中的图片，可以看到除了原来的那个网址，还给我们生成了一个自定义域名的网址，这2个网址都可以用来访问图片。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E6%96%B0%E7%BD%91%E5%9D%80.png" alt="新的图片网址" width="700" /></p><h2 id="4-PicGo-安装配置"><a href="#4-PicGo-安装配置" class="headerlink" title="4. PicGo 安装配置"></a>4. PicGo 安装配置</h2><p>到这里一个可用的图床，就已经基本搭建完成了。但是 Cloudflare 自带的图片上传功能比较简陋，这里给大家推荐一个开源工具 PicGo。 <a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">点击下载</a></p><blockquote><p>PicGo 是一个用来上传图片，并获得图片网址的开源工具</p></blockquote><p>安装完成后，打开 PicGo，首先需要安装一个 S3 插件。点击插件设置，搜索 S3，选择安装这个 s3-lls 插件。如果安装失败，可以重启 PicGo 再重新尝试安装。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/S3.png" alt="安装S3插件" width="500" /><br>安装完插件，打开左侧的图床设置，找到 Amazon S3 然后编辑默认设置。下面来分别介绍这些配置项：<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/picgo%20-%20%E9%85%8D%E7%BD%AE.png" alt="S3参数配置" width="500" /></p><blockquote><p>设置名称，自定义一个就可以。</p></blockquote><blockquote><p>应用秘钥ID和应用秘钥，需要从cloudflare网站获取。在 Cloudflare 网站，点击左侧导航栏中的R2对象存储，选择概述选项。然后点击API按钮，选择管理API令牌，再点击创建API令牌。自定义一个令牌名，权限这里，选择读对象和写，最后点击创建API令牌。创建完成后，在 S3 客户端配置项下面，就给我们生成了 ID 和秘钥，把它们分别填入 PicGo 中就行了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/ID%E7%A7%98%E9%92%A5.png" alt="生成ID和秘钥" width="700" /></p></blockquote><blockquote><p>桶这里填入我们创建的，存储桶的名字 blog.</p></blockquote><blockquote><p>文件路径这里，填入 PicGo 加全文件名。这样通过 PicGo 上传的图片，都会统一放到 blog 存储桶下面，一个叫 PicGo 的文件夹中。</p></blockquote><blockquote><p>权限保持默认</p></blockquote><blockquote><p>地区填入auto，或者我们在创建存储桶时，选择的地区。</p></blockquote><blockquote><p>自定义节点，需要从 Cloudflare 网站获取。在 Cloudflare 网站，点击左侧导航栏中的R2对象存储，选择概述选项。点击API按钮，选择第一项通过 API 来使用 R2 存储。点击复制下面的 https 网址，粘贴到 PicGo 中就可以了。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/API%E7%BD%91%E5%9D%80.png" alt="获取子域网址" width="700" /></p></blockquote><blockquote><p>自定义域名，填写我们托管到 Cloudflare 的域名。</p></blockquote><h1 id="图床效果"><a href="#图床效果" class="headerlink" title="图床效果"></a>图床效果</h1><p>配置完成后就可以用 PicGo 上传图片了，点击左侧的上传区，把图片拖进来就行。然后点击左侧的相册，可以查看已上传的图片。在每张图片的左下角，都有一个复制按钮，点击它，就可以复制到这张图片的网址。<br><br>你会发现，它还帮我们，自动转成了 Markdown 格式，这给使用 Markdown 来写文章的用户，提供了很大的方便。如果我们不需要 Markdown 格式的网址，可以点击上面这个下拉按钮，在这里可以选择，普通的 URL 或者其它格式。<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E7%BD%91%E5%9D%80%E7%9A%84%E6%A0%BC%E5%BC%8F.png" alt="选择网址格式" width="500" /><br>最后我们把图片网址，放到 Markdown 文档中看一下，可以看到，使用完全没有问题，而且图片的加载速度也很流畅！<br><img src="https://tyxiaoming.top/%E5%9B%BE%E5%BA%8A/%E5%8D%9A%E5%AE%A2.png" alt="使用效果" width="700" /></p><h1 id="方案优势"><a href="#方案优势" class="headerlink" title="方案优势"></a>方案优势</h1><p>图床搭建完成后，就可以直接在博客，或个人网站中使用了。那这个方案它具有以下优点：</p><ol><li>免费，Cloudflare R2 存储，为我们提供了足够使用的免费额度</li><li>服务稳定，不需要担心服务商跑路的问题</li><li>不存在网络环境限制，生成的图片链接，国内网络和国外网络都可以打开</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024最新款手机对比评测</title>
    <link href="/2024/12/25/2024%E6%9C%80%E6%96%B0%E6%AC%BE%E6%89%8B%E6%9C%BA%E6%B5%8B%E8%AF%84/"/>
    <url>/2024/12/25/2024%E6%9C%80%E6%96%B0%E6%AC%BE%E6%89%8B%E6%9C%BA%E6%B5%8B%E8%AF%84/</url>
    
    <content type="html"><![CDATA[<h1 id="2024最新款手机对比评测"><a href="#2024最新款手机对比评测" class="headerlink" title="2024最新款手机对比评测"></a>2024最新款手机对比评测</h1><p>在对比分析的过程中，我们不仅将列出各项性能指标的数据，还将结合用户的使用场景和需求，给出具体的评价和建议。比如，对于喜欢玩游戏的用户，我们会推荐处理器性能强大、散热 …</p><h2 id="苹果手机"><a href="#苹果手机" class="headerlink" title="苹果手机"></a>苹果手机</h2><p><img src="https://tyxiaoming.top/%E6%89%8B%E6%9C%BA%E4%BB%8B%E7%BB%8D/iphone-16.jpeg"></p><h2 id="华为手机"><a href="#华为手机" class="headerlink" title="华为手机"></a>华为手机</h2><p><img src="https://tyxiaoming.top/%E6%89%8B%E6%9C%BA%E4%BB%8B%E7%BB%8D/HuaWei-mate70.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/25/hello-world/"/>
    <url>/2024/12/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>工具教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
